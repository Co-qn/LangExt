<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\..\T4\T4Util.ttinclude" #>
using System;

namespace LangExt.Legacy.TypeMatches
{
    /// <summary>
    /// オブジェクトに対して型による擬似的なパターンマッチを提供するためのクラスです。
    /// </summary>
    public static class LegacyObject
    {
<# for (int i = 1; i <= Max; i++) { #>
        /// <summary>
        /// 型パラメータの先頭から順にキャスト出来るかを is 演算子で調べ、is 演算子が true を返した型に対応する処理を実行して返します。
        /// どの型にも変換できなかった場合、オブジェクトをそのままOtherwiseに渡します。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">変換を試みる <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TResult">処理の戻り値の型。</typeparam>
        /// <param name="self">変換対象。</param>
<# for (int j = 0; j < i; j++) { #>
        /// <param name="ifT<#= j + 1 #>">T<#= j + 1 #> つ目の型に変換できた場合に実行される処理。</param>
<# } #>
        /// <param name="Otherwise">どの型にも変換できなかった場合に実行される処理。</param>
        /// <returns>処理の結果。</returns>
        public static TResult TypeMatch<<#= TypeParams("T", i) #>, TResult>(this object self, <#=
            Repeat(", ", "Func<T{0}, TResult> ifT{0}", i) #>, Func<object, TResult> Otherwise)
        {
<# for (int j = 1; j <= i; j++) { #>
            if (self is T<#= j #>) return ifT<#= j #>((T<#= j #>)self);
<# } #>
            return Otherwise(self);
        }

        /// <summary>
        /// 型パラメータの先頭から順にキャスト出来るかを is 演算子で調べ、is 演算子が true を返した型に対応する処理を実行して返します。
        /// どの型にも変換できなかった場合、例外を送出します。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">変換を試みる <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TResult">処理の戻り値の型。</typeparam>
        /// <param name="self">変換対象。</param>
<# for (int j = 0; j < i; j++) { #>
        /// <param name="ifT<#= j + 1 #>">T<#= j + 1 #> つ目の型に変換できた場合に実行される処理。</param>
<# } #>
        /// <returns>処理の結果。</returns>
        public static TResult TypeMatch<<#= TypeParams("T", i) #>, TResult>(this object self, <#=
            Repeat(", ", "Func<T{0}, TResult> ifT{0}", i) #>)
        {
            return TypeMatch(
                self,
                <#= MethodCallArgs("ifT", i) #>,
                _ => { throw new MatchFailureException(string.Format("Doesn't match any of [<#=
                    Repeat(", ", "{{{0}}}", i) #>].", <#= Repeat(", ", "typeof(T{0}).Name", i) #>)); });
        }
<# } #>
    }
}
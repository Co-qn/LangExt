<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="$(SolutionDir)\LangExt2\T4Util.ttinclude" #>
using System;
using LangExt2;
using NUnit.Framework;
using Microsoft.CSharp.RuntimeBinder;

namespace LangExt2.Tests
{
    [TestFixture]
    public class TupleModuleTest
    {
#region Create.Tuple / TupleModule.Create / _1() ... _<#= Max #>()
<# for (int i = 1; i <= Max; i++) { #>
        [Test]
        public void _<#= Max #>要素タプルの<#= i #>番目の要素にアクセスできる()
        {
            var tpl = Create.Tuple(<#= MethodCallArgs("", 1, Max + 1) #>);
            Assert.That(tpl._<#= i #>(), Is.EqualTo(<#= i #>));
        }

<# } #>
#endregion

#region Add / RemoveLast
        [Test]
    public void _2要素タプルにはRemoveLastが存在しない()
        {
            dynamic pair = Create.Tuple(1, 2);
        try
        {
            var _ = pair.RemoveLast();
            Assert.Fail();
        }
        catch (RuntimeBinderException)
        {
            Assert.Pass();
        }
        }

    [Test]
    public void _<#= Max #>要素タプルにはAddが存在しない()
        {
            dynamic tpl = Create.Tuple(<#= MethodCallArgs("", 1, Max + 1) #>);
        try
        {
            var _ = tpl.Add("hoge");
            Assert.Fail();
        }
        catch (RuntimeBinderException)
        {
            Assert.Pass();
        }
        }
#endregion

#region Match
<# for (int i = 1; i <= Max; i++) { #>
        [Test]
        public void _<#= Max #>要素タプルをMatchさせると<#= i #>番目の引数に<#= i #>番目の要素が入ってくる()
        {
            var tpl = Create.Tuple(<#= MethodCallArgs("", 1, Max + 1) #>);
            Assert.That(
            tpl.Match((<#= MethodCallArgs("t", 1, Max + 1) #>) => t<#= i #>),
            Is.EqualTo(<#= i #>));
    }

<# } #>
#endregion

#region Map1 ... Map<#= Max #>
<# for (int i = 1; i <= Max; i++) { #>
        [Test]
        public void _<#= Max #>要素タプルの<#= i #>番目の要素に対してMapできる()
        {
            var tpl = Create.Tuple(<#= MethodCallArgs("", 1, Max + 1) #>);
        var mapped = tpl.Map<#= i #>(x => x * 2);
        
        Assert.That(mapped._<#= i #>(), Is.EqualTo(<#= i #> * 2));
<# for (int j = 1; j <= Max; j++) if (j != i) { #>
        Assert.That(mapped._<#= j #>(), Is.EqualTo(<#= j #>));
<# } #>
    }

<# } #>
#endregion
    }
}
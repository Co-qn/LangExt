<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LangExt</name>
    </assembly>
    <members>
        <member name="T:LangExt.ISeq`1">
            <summary>
            要素Tのシーケンスを表すインターフェイスです。
            </summary>
            <typeparam name="T">要素の型</typeparam>
        </member>
        <member name="T:LangExt.Comparable">
            <summary>
            IComparable[T]に対する操作を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.RawCmp``1(``0,``0)">
            <summary>
            null安全にCompareToを呼び出します。
            selfがnullだった場合、otherがnullなら0を、そうでないなら-1を返します。
            これは、nullを最も小さい値として扱うことを意味します。
            この挙動との整合性を取るために、ComparaToに渡されたオブジェクトがnullだった場合は1以上の数を返すように実装してください。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.Cmp``1(``0,``0)">
            <summary>
            null安全にCompareToを呼び出し、結果をCompareResultに変換して返します。
            selfがnullだった場合、otherがnullならEQを、そうでないならLTを返します。
            これは、nullを最も小さい値として扱うことを意味します。
            この挙動との整合性を取るために、ComparaToに渡されたオブジェクトがnullだった場合は1以上の数を返すように実装してください。
            </summary>
        </member>
        <member name="T:LangExt.Comparable.CompareResult">
            <summary>
            Cmpの結果です。
            </summary>
        </member>
        <member name="F:LangExt.Comparable.CompareResult.LT">
            <summary>
            左側のオブジェクトが右側のオブジェクトよりも小さいことを表します。
            </summary>
        </member>
        <member name="F:LangExt.Comparable.CompareResult.EQ">
            <summary>
            左側のオブジェクトと右側のオブジェクトが同じ大きさを持つことを表します。
            </summary>
        </member>
        <member name="F:LangExt.Comparable.CompareResult.GT">
            <summary>
            左側のオブジェクトが右側のオブジェクトよりも大きいことを表します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.OfInt(System.Int32)">
            <summary>
            数値からCompareResultオブジェクトに変換します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.Match``1(System.Func{``0},System.Func{``0},System.Func{``0})">
            <summary>
            結果に対して場合分けを行います。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.Equals(System.Object)">
            <summary>
            このオブジェクトがobjと等しいかどうかを返します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.GetHashCode">
            <summary>
            このオブジェクトのハッシュ値を計算します。
            </summary>
        </member>
        <member name="M:LangExt.Comparable.CompareResult.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
        </member>
        <member name="T:LangExt.Create">
            <summary>
            様々な型の値を生成するためのモジュールです。
            </summary>
        </member>
        <member name="M:LangExt.Create.Result``1(``0)">
            <summary>
            valueがnullでない場合はResult.Success(value)と、
            valueがnullの場合はResult.Failure(Unit._)と同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するResultのSuccess側の要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合Failure、そうでない場合Success</returns>
        </member>
        <member name="M:LangExt.Create.Result``1(System.Nullable{``0})">
            <summary>
            valueがnullでない場合はResult.Success(value.Value)と、
            valueがnullの場合はResult.Failure(Unit._)と同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するResultのSuccess側の要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合Failure、そうでない場合Success</returns>
        </member>
        <member name="M:LangExt.Create.Seq``1(``0[])">
            <summary>
            引数を要素として含むシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Create.Option``1(``0)">
            <summary>
            valueがnullでない場合はOption.Some(value)と、
            valueがnullの場合はOption.Noneと同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するOptionの要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合None、そうでない場合Some</returns>
        </member>
        <member name="M:LangExt.Create.Option``1(System.Nullable{``0})">
            <summary>
            valueがnullでない場合はOption.Some(value.Value)と、
            valueがnullの場合はOption.Noneと同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するOptionの要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合None、そうでない場合Some</returns>
        </member>
        <member name="M:LangExt.Create.Tuple``2(``0,``1)">
            <summary>2要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``3(``0,``1,``2)">
            <summary>3要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``4(``0,``1,``2,``3)">
            <summary>4要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``5(``0,``1,``2,``3,``4)">
            <summary>5要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``6(``0,``1,``2,``3,``4,``5)">
            <summary>6要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>7要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>8要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>9要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>10要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>11要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>12要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>13要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>14要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>15要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.Create.Tuple``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>16要素のタプルを生成します。</summary>
        </member>
        <member name="T:LangExt.Func">
            <summary>Funcデリゲートに対する関数を提供します。</summary>
        </member>
        <member name="M:LangExt.Func.Id``1(``0)">
            <summary>Id関数です。</summary>
        </member>
        <member name="M:LangExt.Func.Flip``3(System.Func{``0,``1,``2})">
            <summary>2引数関数の引数の順番を入れ替えます。</summary>
        </member>
        <member name="M:LangExt.Func.Flip``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>カリー化関数の引数の順番を入れ替えます。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``3(System.Func{``0,``1,``2})">
            <summary>2つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``3(System.Func{``0,``1,``2})">
            <summary>2つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>2要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>2要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``3(System.Func{``0,``1,``2})">
            <summary>2つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``3(System.Func{``0,``1,``2})">
            <summary>2つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>2つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>2つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>2要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``3(System.Func{System.Tuple{``0,``1},``2})">
            <summary>2要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>2つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``3(System.Func{``0,System.Func{``1,``2}})">
            <summary>2つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``4(System.Func{``0,``1,``2,``3})">
            <summary>3つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``4(System.Func{``0,``1,``2,``3})">
            <summary>3つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>3要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>3要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``4(System.Func{``0,``1,``2,``3})">
            <summary>3つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``4(System.Func{``0,``1,``2,``3})">
            <summary>3つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>3つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>3つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>3要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``4(System.Func{System.Tuple{``0,``1,``2},``3})">
            <summary>3要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>3つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``4(System.Func{``0,System.Func{``1,System.Func{``2,``3}}})">
            <summary>3つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>4つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>4つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>4要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>4要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>4つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>4つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>4つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>4つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>4要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``5(System.Func{System.Tuple{``0,``1,``2,``3},``4})">
            <summary>4要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>4つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``5(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,``4}}}})">
            <summary>4つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``6(System.Func{System.Tuple{``0,``1,``2,``3,``4},``5})">
            <summary>5要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``6(System.Func{System.Tuple{``0,``1,``2,``3,``4},``5})">
            <summary>5要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>5つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>5つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``6(System.Func{System.Tuple{``0,``1,``2,``3,``4},``5})">
            <summary>5要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``6(System.Func{System.Tuple{``0,``1,``2,``3,``4},``5})">
            <summary>5要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>5つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``6(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,``5}}}}})">
            <summary>5つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``7(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>6要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``7(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>6要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>6つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>6つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``7(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>6要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``7(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>6要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>6つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``7(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,``6}}}}}})">
            <summary>6つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``8(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>7要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``8(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>7要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>7つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>7つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``8(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>7要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``8(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>7要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>7つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``8(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,``7}}}}}}})">
            <summary>7つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``9(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8})">
            <summary>8要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``9(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8})">
            <summary>8要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>8つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>8つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``9(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8})">
            <summary>8要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``9(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8})">
            <summary>8要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>8つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``9(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,``8}}}}}}}})">
            <summary>8つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``10(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9})">
            <summary>9要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``10(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9})">
            <summary>9要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>9つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>9つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``10(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9})">
            <summary>9要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``10(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9})">
            <summary>9要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>9つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``10(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,``9}}}}}}}}})">
            <summary>9つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``11(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10})">
            <summary>10要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``11(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10})">
            <summary>10要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>10つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>10つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``11(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10})">
            <summary>10要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``11(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10})">
            <summary>10要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>10つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``11(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,``10}}}}}}}}}})">
            <summary>10つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``12(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11})">
            <summary>11要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``12(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11})">
            <summary>11要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>11つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>11つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``12(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11})">
            <summary>11要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``12(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11})">
            <summary>11要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>11つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``12(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,``11}}}}}}}}}}})">
            <summary>11つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``13(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12})">
            <summary>12要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``13(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12})">
            <summary>12要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>12つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>12つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``13(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12})">
            <summary>12要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``13(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12})">
            <summary>12要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>12つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``13(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,``12}}}}}}}}}}}})">
            <summary>12つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``14(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13})">
            <summary>13要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``14(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13})">
            <summary>13要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>13つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>13つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``14(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13})">
            <summary>13要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``14(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13})">
            <summary>13要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>13つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``14(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,``13}}}}}}}}}}}}})">
            <summary>13つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``15(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14})">
            <summary>14要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``15(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14})">
            <summary>14要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>14つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>14つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``15(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14})">
            <summary>14要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``15(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14})">
            <summary>14要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>14つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``15(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,``14}}}}}}}}}}}}}})">
            <summary>14つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``16(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15})">
            <summary>15要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``16(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15})">
            <summary>15要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>15つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>15つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``16(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15})">
            <summary>15要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``16(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15})">
            <summary>15要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>15つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``16(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,``15}}}}}}}}}}}}}}})">
            <summary>15つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curried``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Curry``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16つの引数を受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurriedX``17(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16})">
            <summary>16要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.CurryX``17(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16})">
            <summary>16要素のタプルを受け取る関数をカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tupled``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Tuple``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16つの引数を受け取る複数関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurriedX``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>16つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.UncurryX``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>16つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untupled``17(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16})">
            <summary>16要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Untuple``17(System.Func{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``16})">
            <summary>16要素のタプルを受け取る関数を複数引数関数化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurried``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>16つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.Uncurry``17(System.Func{``0,System.Func{``1,System.Func{``2,System.Func{``3,System.Func{``4,System.Func{``5,System.Func{``6,System.Func{``7,System.Func{``8,System.Func{``9,System.Func{``10,System.Func{``11,System.Func{``12,System.Func{``13,System.Func{``14,System.Func{``15,``16}}}}}}}}}}}}}}}})">
            <summary>16つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``1(System.Func{``0})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``1(System.Func{``0})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``1(System.Func{System.Nullable{``0}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``1(System.Func{``0})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``1(System.Func{System.Nullable{``0}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``2(System.Func{``0,System.Nullable{``1}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``2(System.Func{``0,System.Nullable{``1}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``3(System.Func{``0,``1,System.Nullable{``2}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``3(System.Func{``0,``1,System.Nullable{``2}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``4(System.Func{``0,``1,``2,System.Nullable{``3}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``4(System.Func{``0,``1,``2,System.Nullable{``3}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``5(System.Func{``0,``1,``2,``3,System.Nullable{``4}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``5(System.Func{``0,``1,``2,``3,System.Nullable{``4}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,System.Nullable{``5}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``6(System.Func{``0,``1,``2,``3,``4,System.Nullable{``5}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,System.Nullable{``6}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``7(System.Func{``0,``1,``2,``3,``4,``5,System.Nullable{``6}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Nullable{``7}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Nullable{``7}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Nullable{``8}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Nullable{``8}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Nullable{``9}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Nullable{``9}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Nullable{``10}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Nullable{``10}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Nullable{``11}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Nullable{``11}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Nullable{``12}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Nullable{``12}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Nullable{``13}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Nullable{``13}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Nullable{``14}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Nullable{``14}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Nullable{``15}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Nullable{``15}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Nullable{``16}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToOptionFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Nullable{``16}})">
            <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``1(System.Func{``0})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``1(System.Func{``0})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``1(System.Func{System.Nullable{``0}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``1(System.Func{``0})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``1(System.Func{System.Nullable{``0}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``2(System.Func{``0,System.Nullable{``1}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``2(System.Func{``0,``1})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``2(System.Func{``0,System.Nullable{``1}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``3(System.Func{``0,``1,System.Nullable{``2}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``3(System.Func{``0,``1,``2})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``3(System.Func{``0,``1,System.Nullable{``2}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``4(System.Func{``0,``1,``2,System.Nullable{``3}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``4(System.Func{``0,``1,``2,System.Nullable{``3}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``5(System.Func{``0,``1,``2,``3,System.Nullable{``4}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``5(System.Func{``0,``1,``2,``3,System.Nullable{``4}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``6(System.Func{``0,``1,``2,``3,``4,System.Nullable{``5}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``6(System.Func{``0,``1,``2,``3,``4,System.Nullable{``5}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,System.Nullable{``6}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``7(System.Func{``0,``1,``2,``3,``4,``5,System.Nullable{``6}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Nullable{``7}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.Nullable{``7}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Nullable{``8}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Nullable{``8}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Nullable{``9}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.Nullable{``9}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Nullable{``10}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.Nullable{``10}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Nullable{``11}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.Nullable{``11}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Nullable{``12}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.Nullable{``12}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Nullable{``13}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.Nullable{``13}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Nullable{``14}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.Nullable{``14}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Nullable{``15}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,System.Nullable{``15}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ExnToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をResultで包む関数に変換します。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.NullToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Nullable{``16}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullの場合、Failureになります。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="M:LangExt.Func.ToResultFunc``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.Nullable{``16}})">
            <summary>関数の結果をResultで包む関数に変換します。関数の結果がnullか例外の場合、Failureになります。nullの場合はNullResultExceptionがFailureの値として使用されます。</summary>
        </member>
        <member name="T:LangExt.Enumerable">
            <summary>IEnumerableに対する関数を提供します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            クエリ式用に用意しています。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>2個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>2個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>ZipされたIEnumerableを元に戻し、2個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>3個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>3個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}})">
            <summary>ZipされたIEnumerableを元に戻し、3個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>4個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>4個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}})">
            <summary>ZipされたIEnumerableを元に戻し、4個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4})">
            <summary>5個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>ZipされたIEnumerableを元に戻し、5個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5})">
            <summary>6個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>ZipされたIEnumerableを元に戻し、6個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6})">
            <summary>7個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>ZipされたIEnumerableを元に戻し、7個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7})">
            <summary>8個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>ZipされたIEnumerableを元に戻し、8個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``10(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8})">
            <summary>9個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}})">
            <summary>ZipされたIEnumerableを元に戻し、9個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``11(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``10(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9})">
            <summary>10個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}})">
            <summary>ZipされたIEnumerableを元に戻し、10個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``12(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``11(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10})">
            <summary>11個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}})">
            <summary>ZipされたIEnumerableを元に戻し、11個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``13(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``12(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11})">
            <summary>12個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}})">
            <summary>ZipされたIEnumerableを元に戻し、12個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``14(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``13(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12})">
            <summary>13個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}})">
            <summary>ZipされたIEnumerableを元に戻し、13個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``15(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``14(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13})">
            <summary>14個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}})">
            <summary>ZipされたIEnumerableを元に戻し、14個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``16(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``15(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14})">
            <summary>15個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}})">
            <summary>ZipされたIEnumerableを元に戻し、15個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ZipWith``17(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14},System.Collections.Generic.IEnumerable{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16個のIEnumerableの要素1つ1つに対して、fを適用したIEnumerableを返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Zip``16(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Collections.Generic.IEnumerable{``9},System.Collections.Generic.IEnumerable{``10},System.Collections.Generic.IEnumerable{``11},System.Collections.Generic.IEnumerable{``12},System.Collections.Generic.IEnumerable{``13},System.Collections.Generic.IEnumerable{``14},System.Collections.Generic.IEnumerable{``15})">
            <summary>16個のIEnumerableをZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.Unzip``16(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}})">
            <summary>ZipされたIEnumerableを元に戻し、16個のIEnumerableのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>IEnumerableに対して、0から始まる整数列をZipします。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>2要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}})">
            <summary>3要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}})">
            <summary>4要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>5要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``6(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>6要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``7(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>7要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``8(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>8要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``9(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}})">
            <summary>9要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``10(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}})">
            <summary>10要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``11(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}})">
            <summary>11要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``12(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}})">
            <summary>12要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``13(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}})">
            <summary>13要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``14(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}})">
            <summary>14要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.WithIndex``15(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}})">
            <summary>15要素のタプルのIEnumerableに対して、0から始まる整数列を加えたタプルのIEnumerableとして返します。</summary>
        </member>
        <member name="M:LangExt.Enumerable.ToSeq``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerable[T]からシーケンスに変換します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.InitInfinite``1(System.Func{System.Int32,``0})">
            <summary>
            fを元に無限に続くIEnumerableを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.RepeatInfinite``1(``0)">
            <summary>
            指定した要素を含む無限に続くIEnumerableを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Unfold``2(``0,System.Func{``0,LangExt.Option{System.Tuple{``1,``0}}})">
            <summary>
            初期状態からfによって計算されたIEnumerableを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            IEnumerableから、predを満たす要素のみを含むIEnumerableを生成して返します。
            標準クエリ演算子のWhereに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.FilterWitIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            IEnumerableから、predを満たす要素のみを含むIEnumerableを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のWhereに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            IEnumerableのすべての要素に対してfを適用したIEnumerableを生成して返します。
            標準クエリ演算子のSelectに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.MapWithIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            IEnumerableのすべての要素に対してfを適用したIEnumerableを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSelectに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Bind``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            IEnumerableの各要素を順番にfの引数に対して渡し、fから返された各IEnumerableを平坦化したIEnumerableを生成して返します。
            標準クエリ演算子のSelectManyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.BindWithIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            IEnumerableの各要素を順番にfの引数に対して渡し、fから返された各IEnumerableを平坦化したIEnumerableを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSelectManyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Choose``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LangExt.Option{``1}})">
            <summary>
            IEnumerableのすべての要素に対してfを適用し、Someを返した要素のみを集めたIEnumerableを生成して返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.ChooseWithIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,LangExt.Option{``1}})">
            <summary>
            IEnumerableのすべての要素に対してfを適用し、Someを返した要素のみを集めたIEnumerableを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            非ジェネリック型のIEnumerableを、IEnumerable[T]に変換します。
            標準クエリ演算子のCastに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerableに別のIEnumerableを連結したIEnumerableを生成して返します。
            標準クエリ演算子のConcatに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            ネストしたIEnumerableのネストを一段取り除きます。
            例えば、IEnumerable[IEnumerable[T]]をIEnumerable[T]に変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerableの先頭からn個の要素をスキップしたIEnumerableを生成して返します。
            nが0以下の場合、入力のIEnumerableがそのまま返されます。
            nがIEnumerableの要素の個数よりも大きい場合、空のIEnumerableが返されます。
            標準クエリ演算子のSkipに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerableの先頭からn個の要素を取り出したIEnumerableを生成して返します。
            nが0以下の場合、空のIEnumerableが返されます。
            nがIEnumerableの要素の個数よりも大きい場合、入力のIEnumerableがそのまま返されます。
            標準クエリ演算子のTakeに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            IEnumerableの先頭からpredを満たす要素をスキップしたIEnumerableを生成して返します。
            標準クエリ演算子のSkipWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SkipWhileWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            IEnumerableの先頭からpredを満たす要素をスキップしたIEnumerableを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSkipWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            IEnumerableの先頭からpredを満たす要素を取り出したIEnumerableを生成して返します。
            標準クエリ演算子のTakeWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.TakeWhileWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            IEnumerableの先頭からpredを満たす要素を取り出したIEnumerableを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のTakeWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Cache``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerableを、走査した要素をキャッシュするIEnumerableに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.SplitAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            指定した位置でIEnumerableを分割します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Span``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            TakeWhileの結果とSkipWhileの結果の両方を同時に取得します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Break``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            TakeWhileの結果とSkipWhileの結果の両方を同時に取得します。
            Spanと異なり、predの否定が渡されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Windowed``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            IEnumerableから取得された要素のスライド式ウィンドウを生成するIEnumerableを返します。
            各ウィンドウは、新しい配列として返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Windowed3``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerableから取得された要素のサイズ3のスライド式ウィンドウを生成するIEnumerableを返します。
            各ウィンドウは、3要素のタプルとして返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Pairwise``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            IEnumerableから取得された要素のサイズ2のスライド式ウィンドウを生成するIEnumerableを返します。
            各ウィンドウは、2要素のタプルとして返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            IEnumerableの先頭から畳み込みを行い、各ステップの結果をIEnumerableとして返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Enumerable.Scan1``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            IEnumerableの先頭から畳み込みを行い、各ステップの結果をIEnumerableとして返します。
            Scanと異なり、初期値にはIEnumerableの先頭要素が使われます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="T:LangExt.NullResultException">
            <summary>
            関数がnullを返したことを表す例外です。
            この例外は、Func.ToResultの結果としてのみ使用されます。
            </summary>
        </member>
        <member name="M:LangExt.NullResultException.Equals(System.Object)">
            <summary>objがNullResultExceptionであればtrueを返します。</summary>
        </member>
        <member name="M:LangExt.NullResultException.GetHashCode">
            <summary>このオブジェクトのハッシュコードを返します。</summary>
        </member>
        <member name="M:LangExt.NullResultException.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
        </member>
        <member name="T:LangExt.IOrderedSeq`1">
            <summary>
            要素Tの並び替えられたシーケンスを表すインターフェイスです。
            </summary>
            <typeparam name="T">要素の型</typeparam>
        </member>
        <member name="T:LangExt.OrderedSeq">
            <summary>
            並び替えられたシーケンスに対する関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.ThenBy``2(LangExt.IOrderedSeq{``0},System.Func{``0,``1})">
            <summary>
            並び替えられたシーケンスをさらに別のキーで安定ソートします。
            標準クエリ演算子のThenByに対応します。
            </summary>
        </member>
        <member name="M:LangExt.OrderedSeq.RevThenBy``2(LangExt.IOrderedSeq{``0},System.Func{``0,``1})">
            <summary>
            並び替えられたシーケンスをさらに別のキーで安定ソートします。
            標準クエリ演算子のThenByDescendingに対応します。
            </summary>
        </member>
        <member name="T:LangExt.Result">
            <summary>
            Resultに対する関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Result.Create``1(``0)">
            <summary>
            valueがnullでない場合はResult.Success(value)と、
            valueがnullの場合はResult.Failure(Unit._)と同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するResultのSuccess側の要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合Failure、そうでない場合Success</returns>
        </member>
        <member name="M:LangExt.Result.Create``1(System.Nullable{``0})">
            <summary>
            valueがnullでない場合はResult.Success(value.Value)と、
            valueがnullの場合はResult.Failure(Unit._)と同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するResultのSuccess側の要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合Failure、そうでない場合Success</returns>
        </member>
        <member name="M:LangExt.Result.NewSuccess``2(``0)">
            <summary>
            成功した結果としてvalueを格納するResultを生成します。
            通常は、NewSuccessではなく、Successを使用します。
            このメソッドは、失敗側の型も指定したい場合に使用します。
            </summary>
            <typeparam name="TSuccess">Resultに保持する成功の型</typeparam>
            <typeparam name="TFailure">Resultに保持する失敗の型</typeparam>
            <param name="value">Resultに保持する成功を表す値</param>
            <returns>Success(value)</returns>
        </member>
        <member name="M:LangExt.Result.Success``1(``0)">
            <summary>
            成功した結果としてvalueを格納するResultを生成します。
            </summary>
            <typeparam name="TSuccess">Resultに保持する成功の型</typeparam>
            <param name="value">Resultに保持する成功を表す値</param>
            <returns>Success(value)</returns>
        </member>
        <member name="M:LangExt.Result.NewFailure``2(``1)">
            <summary>
            失敗した結果としてvalueを格納するResultを生成します。
            通常は、NewFailureではなく、Failureを使用します。
            このメソッドは、成功側の型も指定したい場合に使用します。
            </summary>
            <typeparam name="TSuccess">Resultに保持する成功の型</typeparam>
            <typeparam name="TFailure">Resultに保持する失敗の型</typeparam>
            <param name="value">Resultに保持する失敗を表す値</param>
            <returns>Failure(value)</returns>
        </member>
        <member name="M:LangExt.Result.Failure``1(``0)">
            <summary>
            失敗した結果としてvalueを格納するResultを生成します。
            </summary>
            <typeparam name="TFailure">Resultに格納する失敗の型</typeparam>
            <param name="value">Resultに保持する失敗を表す値</param>
            <returns>Failure(value)</returns>
        </member>
        <member name="M:LangExt.Result.FromFunc``1(System.Func{``0})">
            <summary>
            失敗しうる無引数関数からResultを生成します。
            この関数は、例外を使用するAPIとResultを使ったAPIの橋渡しをします。
            </summary>
            <typeparam name="TSuccess">関数が成功した場合の型(戻り値の型)</typeparam>
            <param name="f">実行する関数</param>
            <returns>関数が成功した場合、結果をSuccessで包んだ値。失敗した場合、例外をFailureで包んだ値。</returns>
        </member>
        <member name="M:LangExt.Result.IsSuccess``2(LangExt.Result{``0,``1})">
            <summary>
            成功かどうかを判断する関数が必要な時に使います。
            Result[TSuccess, TFailure]がプロパティとしてIsSuccessを持つため、拡張メソッドにはしていません。
            </summary>
        </member>
        <member name="M:LangExt.Result.IsFailure``2(LangExt.Result{``0,``1})">
            <summary>
            失敗かどうかを判断する関数が必要な時に使います。
            Result[TSuccess, TFailure]がプロパティとしてIsFailureを持つため、拡張メソッドにはしていません。
            </summary>
        </member>
        <member name="M:LangExt.Result.Fold``3(LangExt.Result{``0,``1},``2,System.Func{``2,``0,``2})">
            <summary>
            (Result[T, _], U, ((U, T) → U)) → U
            </summary>
        </member>
        <member name="M:LangExt.Result.FoldFailure``3(LangExt.Result{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            (Result[_, T], U, ((U, T) → U)) → U
            </summary>
        </member>
        <member name="M:LangExt.Result.Map``3(LangExt.Result{``0,``1},System.Func{``0,``2})">
            <summary>
            (Result[T, _], (T → U)) → Result[U, _]
            </summary>
        </member>
        <member name="M:LangExt.Result.MapFailure``3(LangExt.Result{``0,``1},System.Func{``1,``2})">
            <summary>
            (Result[_, T], (T → U)) → Result[_, U]
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``2(LangExt.Result{``0,``1},System.Action{``0})">
            <summary>
            (Result[T, _], (T → void)) → void
            </summary>
        </member>
        <member name="M:LangExt.Result.Iter``2(LangExt.Result{``0,``1},System.Func{``0,LangExt.Unit})">
            <summary>
            (Result[T, _], (T → Unit)) → Unit
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``2(LangExt.Result{``0,``1},System.Action{``1})">
            <summary>
            (Result[_, T], (T → void)) → void
            </summary>
        </member>
        <member name="M:LangExt.Result.IterFailure``2(LangExt.Result{``0,``1},System.Func{``1,LangExt.Unit})">
            <summary>
            (Result[_, T], (T → Unit)) → Unit
            </summary>
        </member>
        <member name="M:LangExt.Result.Exists``2(LangExt.Result{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            (Result[T, _], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Result.ExistsFailure``2(LangExt.Result{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            (Result[_, T], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Result.Forall``2(LangExt.Result{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            (Result[T, _], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Result.ForallFailure``2(LangExt.Result{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            (Result[_, T], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Result.Len``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, U] → int
            </summary>
        </member>
        <member name="M:LangExt.Result.LenFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, U] → int
            </summary>
        </member>
        <member name="M:LangExt.Result.Count``2(LangExt.Result{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            (Result[T, _], (T → bool)) → int
            </summary>
        </member>
        <member name="M:LangExt.Result.CountFailure``2(LangExt.Result{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            (Result[_, T], (T → bool)) → int
            </summary>
        </member>
        <member name="M:LangExt.Result.ToArray``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, _] → T[]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToArrayFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[_, T] → T[]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToSeq``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, _] → ISeq[T]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToSeqFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[_, T] → ISeq[T]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToOption``2(LangExt.Result{``0,``1})">
            <summary>
            Result[T, _] → Option[T]
            </summary>
        </member>
        <member name="M:LangExt.Result.ToOptionFailure``2(LangExt.Result{``0,``1})">
            <summary>
            Result[_, T] → Option[T]
            </summary>
        </member>
        <member name="M:LangExt.Result.SwapResult``2(LangExt.Result{``0,``1})">
            <summary>
            Result[TSuccess, TFailure] → Result[TFailure, TSuccess]
            </summary>
        </member>
        <member name="M:LangExt.Result.Select``3(LangExt.Result{``0,``1},System.Func{``0,``2})">
            <summary>
            クエリ式でResultを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Result.SelectMany``4(LangExt.Result{``0,``1},System.Func{``0,LangExt.Result{``2,``1}},System.Func{``0,``2,``3})">
            <summary>
            クエリ式でResultを扱うためのメソッドです。
            </summary>
        </member>
        <member name="T:LangExt.Result`2">
            <summary>
            Option[T]に加え、失敗時の原因も表すことのできるデータ型です。
            </summary>
            <remarks>
            この型は成功を表す「Success」と、失敗を表す「Failure」のどちらかとなります。
            </remarks>
            <typeparam name="TSuccess">成功したときの値の型</typeparam>
            <typeparam name="TFailure">失敗したときの値の型</typeparam>
        </member>
        <member name="M:LangExt.Result`2.GetOr(`0)">
            <summary>
            Successの場合、保持された値を取り出します。
            Failureの場合、引数に指定した値を返します。
            </summary>
            <param name="defaultValue">Failureの場合の戻り値</param>
            <returns>Successの場合保持している値。Failureの場合引数で指定した値</returns>
        </member>
        <member name="M:LangExt.Result`2.GetFailureOr(`1)">
            <summary>
            Failureの場合、保持された値を取り出します。
            Successの場合、引数に指定した値を返します。
            </summary>
            <param name="defaultValue">Successの場合の戻り値</param>
            <returns>Failureの場合保持している値。Successの場合引数で指定した値</returns>
        </member>
        <member name="M:LangExt.Result`2.GetOrElse(System.Func{`0})">
            <summary>
            Successの場合、保持された値を取り出します。
            Failureの場合、引数に指定した関数の実行結果を返します。
            </summary>
            <param name="defaultF">Failureの場合の戻り値を返す関数</param>
            <returns>Successの場合保持している値。Failureの場合引数で指定した関数が返す値</returns>
        </member>
        <member name="M:LangExt.Result`2.GetFailureOrElse(System.Func{`1})">
            <summary>
            Failureの場合、保持された値を取り出します。
            Successの場合、引数に指定した関数の実行結果を返します。
            </summary>
            <param name="defaultF">Successの場合の戻り値を返す関数</param>
            <returns>Failureの場合保持している値。Successの場合引数で指定した関数が返す値</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Implicit(LangExt.Result{`0,LangExt.Placeholder})~LangExt.Result{`0,`1}">
            <summary>
            Result.Successで取得したオブジェクトを、任意のTFailureのSuccessに暗黙変換します。
            </summary>
            <param name="r">Result.Success</param>
            <returns>任意のTFailureのSuccess</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Implicit(LangExt.Result{`0,LangExt.Unit})~LangExt.Result{`0,`1}">
            <summary>
            Result[TSuccess, Unit]を、Result[TSuccess, TFailure]に暗黙変換します。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.op_Implicit(LangExt.Result{LangExt.Placeholder,`1})~LangExt.Result{`0,`1}">
            <summary>
            Result.Failureで取得したオブジェクトを、任意のTSuccessのFailureに暗黙変換します。
            </summary>
            <param name="r">Result.Failure</param>
            <returns>任意のTSuccessのFailure</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Implicit(LangExt.Result{LangExt.Unit,`1})~LangExt.Result{`0,`1}">
            <summary>
            Result[Unit, TFailure]を、Result[TSuccess, TFailure]に暗黙変換します。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.Cast``1">
            <summary>
            Result[TSuccess, TFailure]型のFailureを、Result[TSuccess2, TFailure]に変換します。
            オブジェクトがSuccessの場合、InvalidOperationExceptionが投げられます。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.SafeCast``1(System.Func{`0,``0})">
            <summary>
            Result[TSuccess, TFailure]型を、Result[TSuccess2, TFailure]に変換します。
            オブジェクトがSuccessの場合、casterの結果が返ります。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.CastFailure``1">
            <summary>
            Result[TSuccess, TFailure]型のFailureを、Result[TSuccess, TFailure2]に変換します。
            オブジェクトがFailureの場合、InvalidOperationExceptionが投げられます。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.SafeCastFailure``1(System.Func{`1,``0})">
            <summary>
            Result[TSuccess, TFailure]型を、Result[TSuccess, TFailure2]に変換します。
            オブジェクトがFailureの場合、casterの結果が返ります。
            </summary>
        </member>
        <member name="M:LangExt.Result`2.Match``1(System.Func{`0,``0},System.Func{`1,``0})">
            <summary>
            擬似的にパターンマッチを行います。
            成功の場合と失敗の場合の両方で何らかの処理を行う必要がある際に使用します。
            </summary>
            <typeparam name="T">パターンマッチが返す処理の型</typeparam>
            <param name="Success">Successの場合の処理</param>
            <param name="Failure">Failureの場合の処理</param>
            <returns>処理が返した値</returns>
        </member>
        <member name="M:LangExt.Result`2.Match(System.Action{`0},System.Action{`1})">
            <summary>
            擬似的にパターンマッチを行います。
            成功の場合と失敗の場合の両方で何らかの処理を行う必要がある際に使用します。
            </summary>
            <param name="Success">Successの場合の処理</param>
            <param name="Failure">Failureの場合の処理</param>
        </member>
        <member name="M:LangExt.Result`2.Bind``1(System.Func{`0,LangExt.Result{``0,`1}})">
            <summary>
            Option[TSuccess, TFailure]をOption[TSuccess2, TFailure]型に変換します。
            Successの場合のみに変換を適用します。
            変換は、TSuccess型を受け取りResult[TSuccess2, TFailure]を返す関数として指定します。
            </summary>
            <typeparam name="TSuccess2">変換先の型</typeparam>
            <param name="f">変換に用いる関数</param>
            <returns>変換した値</returns>
        </member>
        <member name="M:LangExt.Result`2.BindFailure``1(System.Func{`1,LangExt.Result{`0,``0}})">
            <summary>
            Option[TSuccess, TFailure]をOption[TSuccess, TFailure2]型に変換します。
            Failureの場合のみに変換を適用します。
            変換は、TFailure型を受け取りResult[TSuccess, TFailure2]を返す関数として指定します。
            </summary>
            <typeparam name="TFailure2">変換先の型</typeparam>
            <param name="f">変換に用いる関数</param>
            <returns>変換した値</returns>
        </member>
        <member name="M:LangExt.Result`2.Equals(LangExt.Result{`0,`1})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するOption</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Result`2.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Equality(LangExt.Result{`0,`1},LangExt.Result{`0,`1})">
            <summary>
            2つのResultの比較を行います。 
            </summary>
            <param name="a">1つ目のResult</param>
            <param name="b">2つ目のResult</param>
            <returns>2つのResultが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Result`2.op_Inequality(LangExt.Result{`0,`1},LangExt.Result{`0,`1})">
            <summary>
            2つのResultの比較を行います。 
            </summary>
            <param name="a">1つ目のResult</param>
            <param name="b">2つ目のResult</param>
            <returns>2つのResultが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Result`2.op_True(LangExt.Result{`0,`1})">
            <summary>
            Resultが成功かどうかを判定します。
            </summary>
            <param name="x">判定の対象</param>
            <returns>Successの場合はtrue、Failureの場合はfalse</returns>
        </member>
        <member name="M:LangExt.Result`2.op_False(LangExt.Result{`0,`1})">
            <summary>
            Resultが失敗かどうかを判定します。
            </summary>
            <param name="x">判定の対象</param>
            <returns>Successの場合はfalse、Failureの場合はtrue</returns>
        </member>
        <member name="M:LangExt.Result`2.OrElse(System.Func{LangExt.Result{`0,`1}})">
            <summary>
            自身が値を持つ場合は自身を、そうでない場合はelsePartの結果を返します。
            Resultは短絡のor演算子を提供しているため、そちらを使用したほうが効率的です。
            </summary>
            <param name="elsePart">自身が値を持たなかった場合の値を返す関数</param>
            <returns>自身が値を持つ場合は自身、値を持たない場合はelsePartの結果</returns>
        </member>
        <member name="M:LangExt.Result`2.AndThen``1(System.Func{LangExt.Result{``0,`1}})">
            <summary>
            自身とthenPartの結果の両方が値を持つ場合はthenPartの結果を、
            そうでない場合はFailure(自身がFailureの場合は自身、そうでない場合はthenPartの結果のFailure)を返します。
            Resultは短絡のand演算子を提供しているため、そちらを使用したほうが効率的です。
            </summary>
            <param name="thenPart">自身が値を持つ場合の値を返す関数</param>
            <returns>
            自身とthenPartの結果の両方が値を持つ場合はthenPartの結果、
            どちらか一方でも値を持たなかった場合はFailure
            (自身がFailureの場合は自身、そうでない場合はthenPartの結果のFailure)
            </returns>
        </member>
        <member name="M:LangExt.Result`2.op_BitwiseOr(LangExt.Result{`0,`1},LangExt.Result{`0,`1})">
            <summary>
            左辺のResultがSuccessの場合は左辺を、そうでない場合は右辺を返します。
            通常、直接使用せず、短絡演算子として使用します。
            </summary>
            <param name="a">1つ目のResult</param>
            <param name="b">2つ目のResult</param>
            <returns>左辺のResultがSuccessの場合は左辺、それ以外の場合は右辺</returns>
        </member>
        <member name="M:LangExt.Result`2.op_BitwiseAnd(LangExt.Result{`0,`1},LangExt.Result{`0,`1})">
            <summary>
            両辺のResultがSuccessの場合右辺を、そうでない場合はFailure(左辺がFailureの場合は左辺、そうでない場合はthenPartの結果のFailure)を返します。
            通常、直接使用せず、短絡演算子として使用します。
            </summary>
            <param name="a">1つ目のResult</param>
            <param name="b">2つ目のResult</param>
            <returns>
            両辺のResultがSuccessの場合は右辺を、
            一方でも値を持たない場合はFailure
            (左辺がFailureの場合は左辺、そうでない場合はthenPartの結果のFailure)
            </returns>
        </member>
        <member name="M:LangExt.Result`2.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Result`2.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Result`2.IsSuccess">
            <summary>
            このオブジェクトが成功を表すかどうかを返します。
            制御構文内でboolが必要な場所に対しては、IsSuccessやIsFailureではなく、Resultオブジェクトをそのまま使用することも可能です。
            </summary>
        </member>
        <member name="P:LangExt.Result`2.IsFailure">
            <summary>
            このオブジェクトが失敗を表すかどうかを返します。
            制御構文内でboolが必要な場所に対しては、IsSuccessやIsFailureではなく、Resultオブジェクトをそのまま使用することも可能です。
            </summary>
        </member>
        <member name="T:LangExt.Seq">
            <summary>
            シーケンスに対する関数を提供します。
            シーケンスの状態と引数によって例外を投げうる関数は、Unsafe名前空間のSeqモジュールで提供しています。
            Initなどの、シーケンスの状態によらず、他の引数のみによって例外を投げうる関数はこのモジュールに定義しています。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Empty``1">
            <summary>
            空のシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Create``1(``0[])">
            <summary>
            引数を要素として含むシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.InitInfinite``1(System.Func{System.Int32,``0})">
            <summary>
            fを元に無限に続くシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Init``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            fを元にn要素のシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RepeatInfinite``1(``0)">
            <summary>
            指定した要素を含む無限に続くシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Repeat``1(System.Int32,``0)">
            <summary>
            指定した要素を含むn要素のシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Singleton``1(``0)">
            <summary>
            指定した要素のみを含む1要素のシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Unfold``2(``0,System.Func{``0,LangExt.Option{System.Tuple{``1,``0}}})">
            <summary>
            初期状態からfによって計算されたシーケンスを生成します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Len``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの長さを求めます。
            標準クエリ演算子のCountに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongLen``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの長さを求めます。
            標準クエリ演算子のLongCountに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Count``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            predに合致する要素の個数を求めます。
            標準クエリ演算子のCountに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongCount``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            predに合致する要素の個数を求めます。
            標準クエリ演算子のLongCountに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Sum(LangExt.ISeq{System.Int32})">
            <summary>
            intのシーケンスの総和を求めます。
            標準クエリ演算子のSumに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSum(LangExt.ISeq{System.Int64})">
            <summary>
            longのシーケンスの総和を求めます。
            標準クエリ演算子のSumに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Sum``1(LangExt.ISeq{``0},LangExt.ISumStrategy{``0})">
            <summary>
            任意の型のシーケンスの総和を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
            <param name="self">レシーバ</param>
            <param name="strategy">総和を求める戦略を表すオブジェクト</param>
        </member>
        <member name="M:LangExt.Seq.SumBy``1(LangExt.ISeq{``0},System.Func{``0,System.Int32})">
            <summary>
            任意の型のシーケンスの総和をintとして求めます。
            標準クエリ演算子のSumに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.LongSumBy``1(LangExt.ISeq{``0},System.Func{``0,System.Int64})">
            <summary>
            任意の型のシーケンスの総和をlongとして求めます。
            標準クエリ演算子のSumに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SumBy``2(LangExt.ISeq{``0},System.Func{``0,``1},LangExt.ISumStrategy{``1})">
            <summary>
            任意の型のシーケンスの総和を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
            <param name="self">レシーバ</param>
            <param name="f">加算対象のオブジェクトへの変換関数</param>
            <param name="strategy">総和を求める戦略を表すオブジェクト</param>
        </member>
        <member name="M:LangExt.Seq.TryMax``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの最大値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxWith``1(LangExt.ISeq{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            任意の型のシーケンスの最大値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMaxBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            任意の型のシーケンスの最大値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMin``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの最小値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinWith``1(LangExt.ISeq{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            任意の型のシーケンスの最小値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryMinBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            任意の型のシーケンスの最小値を求めます。
            シーケンスに要素が含まれなかった場合、Noneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Fold``2(LangExt.ISeq{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            シーケンスを先頭から畳み込みます。
            標準クエリ演算子のAggregateに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduce``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスを先頭から畳み込みます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FoldBack``2(LangExt.ISeq{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            シーケンスを末尾から畳み込みます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryReduceBack``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスを末尾から畳み込みます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan``2(LangExt.ISeq{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            シーケンスの先頭から畳み込みを行い、各ステップの結果をシーケンスとして返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack``2(LangExt.ISeq{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            シーケンスの末尾から畳み込みを行い、各ステップの結果をシーケンスとして返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Scan1``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスの先頭から畳み込みを行い、各ステップの結果をシーケンスとして返します。
            Scanと異なり、初期値にはシーケンスの先頭要素が使われます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ScanBack1``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスの末尾から畳み込みを行い、各ステップの結果をシーケンスとして返します。
            Scanと異なり、初期値にはシーケンスの末尾要素が使われます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryFind``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスから、predを満たす最初の要素を探索します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryPick``2(LangExt.ISeq{``0},System.Func{``0,LangExt.Option{``1}})">
            <summary>
            シーケンスから、fがSomeを返す最初の要素を探索します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IsEmpty``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスが空かどうかを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IsNotEmpty``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスに要素が含まれるかどうかを返します。
            標準クエリ演算子のAnyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Forall``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスのすべての要素がpredを満たすかどうかを返します。
            標準クエリ演算子のAllに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Exists``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスの要素のうち一つでもpredを満たす要素があるかどうかを返します。
            標準クエリ演算子のAnyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Filter``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスから、predを満たす要素のみを含むシーケンスを生成して返します。
            標準クエリ演算子のWhereに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.FilterWitIndex``1(LangExt.ISeq{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            シーケンスから、predを満たす要素のみを含むシーケンスを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のWhereに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Map``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            シーケンスのすべての要素に対してfを適用したシーケンスを生成して返します。
            標準クエリ演算子のSelectに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapWithIndex``2(LangExt.ISeq{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            シーケンスのすべての要素に対してfを適用したシーケンスを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSelectに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``1(LangExt.ISeq{``0},System.Action{``0})">
            <summary>
            シーケンスのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Iter``1(LangExt.ISeq{``0},System.Func{``0,LangExt.Unit})">
            <summary>
            シーケンスのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``1(LangExt.ISeq{``0},System.Action{``0,System.Int32})">
            <summary>
            シーケンスのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.IterWithIndex``1(LangExt.ISeq{``0},System.Func{``0,System.Int32,LangExt.Unit})">
            <summary>
            シーケンスのすべての要素に対してactを実行します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Bind``2(LangExt.ISeq{``0},System.Func{``0,LangExt.ISeq{``1}})">
            <summary>
            シーケンスの各要素を順番にfの引数に対して渡し、fから返された各シーケンスを平坦化したシーケンスを生成して返します。
            標準クエリ演算子のSelectManyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.BindWithIndex``2(LangExt.ISeq{``0},System.Func{``0,System.Int32,LangExt.ISeq{``1}})">
            <summary>
            シーケンスの各要素を順番にfの引数に対して渡し、fから返された各シーケンスを平坦化したシーケンスを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSelectManyに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Collect``3(LangExt.ISeq{``0},System.Func{``0,``2})">
            <summary>
            シーケンスの各要素を順番にfの引数に対して渡し、fから返された各シーケンスを平坦化したシーケンスを生成して返します。
            標準クエリ演算子のSelectManyに似ていますが、渡す関数の戻り値の型がより広いものを受け入れます。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Choose``2(LangExt.ISeq{``0},System.Func{``0,LangExt.Option{``1}})">
            <summary>
            シーケンスのすべての要素に対してfを適用し、Someを返した要素のみを集めたシーケンスを生成して返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ChooseWithIndex``2(LangExt.ISeq{``0},System.Func{``0,System.Int32,LangExt.Option{``1}})">
            <summary>
            シーケンスのすべての要素に対してfを適用し、Someを返した要素のみを集めたシーケンスを生成して返します。
            fには、要素のほかに要素のインデックスも渡されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Skip``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスの先頭からn個の要素をスキップしたシーケンスを生成して返します。
            nが0以下の場合、入力のシーケンスがそのまま返されます。
            nがシーケンスの要素の個数よりも大きい場合、空のシーケンスが返されます。
            標準クエリ演算子のSkipに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Take``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスの先頭からn個の要素を取り出したシーケンスを生成して返します。
            nが0以下の場合、空のシーケンスが返されます。
            nがシーケンスの要素の個数よりも大きい場合、入力のシーケンスがそのまま返されます。
            標準クエリ演算子のTakeに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhile``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスの先頭からpredを満たす要素をスキップしたシーケンスを生成して返します。
            標準クエリ演算子のSkipWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SkipWhileWithIndex``1(LangExt.ISeq{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            シーケンスの先頭からpredを満たす要素をスキップしたシーケンスを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のSkipWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhile``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスの先頭からpredを満たす要素を取り出したシーケンスを生成して返します。
            標準クエリ演算子のTakeWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TakeWhileWithIndex``1(LangExt.ISeq{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            シーケンスの先頭からpredを満たす要素を取り出したシーケンスを生成して返します。
            predには、要素のほかに要素のインデックスも渡されます。
            標準クエリ演算子のTakeWhileに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Partition``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            predを満たす要素と満たさない要素にシーケンスを分割します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SplitAt``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            指定した位置シーケンスを分割します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Span``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            TakeWhileの結果とSkipWhileの結果の両方を同時に取得します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Break``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            TakeWhileの結果とSkipWhileの結果の両方を同時に取得します。
            Spanと異なり、predの否定が渡されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Windowed``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスから取得された要素のスライド式ウィンドウを生成するシーケンスを返します。
            各ウィンドウは、新しい配列として返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Windowed3``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスから取得された要素のサイズ3のスライド式ウィンドウを生成するシーケンスを返します。
            各ウィンドウは、3要素のタプルとして返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Pairwise``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスから取得された要素のサイズ2のスライド式ウィンドウを生成するシーケンスを返します。
            各ウィンドウは、2要素のタプルとして返されます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Sort``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスをソートします。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSort``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスを逆順にソートします。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SortBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            シーケンスをソートします。
            標準クエリ演算子のOrderByに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.RevSortBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            シーケンスを逆順にソートします。
            標準クエリ演算子のOrderByDescendingに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ToString``1(LangExt.ISeq{``0},System.String,System.String,System.String)">
            <summary>
            指定されたセパレータでシーケンスを連結し、文字列化します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ToString``1(LangExt.ISeq{``0},System.String)">
            <summary>
            指定されたセパレータでシーケンスを連結し、文字列化します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ToArray``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスを配列に変換します。
            標準クエリ演算子のToArrayに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.TryGet``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスの指定番目の要素を返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Append``1(LangExt.ISeq{``0},LangExt.ISeq{``0})">
            <summary>
            シーケンスに別のシーケンスを連結したシーケンスを生成して返します。
            標準クエリ演算子のConcatに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Concat``2(LangExt.ISeq{``1})">
            <summary>
            ネストしたシーケンスのネストを一段取り除きます。
            例えば、ISeq[ISeq[T]]をISeq[T]に変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Cache``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスを、走査した要素をキャッシュするシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Reverse``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスを反転させたシーケンスを生成します。
            標準クエリ演算子のReverseに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Sequence``1(LangExt.ISeq{LangExt.Option{``0}})">
            <summary>
            Option[T]のシーケンスすべてがSomeだった場合は値を取り出したシーケンスをSomeに包んで返し、
            一つでもNoneが存在した場合はNoneを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SequenceSuccess``2(LangExt.ISeq{LangExt.Result{``0,``1}})">
            <summary>
            Result[TSuccess, TFailure]のシーケンスすべてがSuccessだった場合は値を取り出したシーケンスをSuccessに包んで返し、
            一つでもFailureが存在した場合はFailureを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SequenceFailure``2(LangExt.ISeq{LangExt.Result{``0,``1}})">
            <summary>
            Result[TSuccess, TFailure]のシーケンスすべてがFailureだった場合は値を取り出したシーケンスをSuccessに包んで返し、
            一つでもFailureが存在した場合はFailureを返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OnlySome``1(LangExt.ISeq{LangExt.Option{``0}})">
            <summary>
            Option[T]のシーケンスからSomeの要素のみを抜き出し、その値を取り出したシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OnlySuccess``2(LangExt.ISeq{LangExt.Result{``0,``1}})">
            <summary>
            Result[T, _]のシーケンスからSuccessの要素のみを抜き出し、その値を取り出したシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OnlyFailure``2(LangExt.ISeq{LangExt.Result{``0,``1}})">
            <summary>
            Result[_, T]のシーケンスからFailureの要素のみを抜き出し、その値を取り出したシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapOption``1(LangExt.ISeq{``0})">
            <summary>
            nullを含みうるシーケンスから、Optionのシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapOption``1(LangExt.ISeq{System.Nullable{``0}})">
            <summary>
            nullを含みうるシーケンスから、Optionのシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapResult``1(LangExt.ISeq{``0})">
            <summary>
            nullを含みうるシーケンスから、Resultのシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.MapResult``1(LangExt.ISeq{System.Nullable{``0}})">
            <summary>
            nullを含みうるシーケンスから、Resultのシーケンスに変換します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Select``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.SelectMany``3(LangExt.ISeq{``0},System.Func{``0,LangExt.ISeq{``1}},System.Func{``0,``1,``2})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Where``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.Join``4(LangExt.ISeq{``0},LangExt.ISeq{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.GroupJoin``4(LangExt.ISeq{``0},LangExt.ISeq{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,LangExt.ISeq{``1},``3})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OrderBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.OrderByDescending``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            クエリ式でシーケンスを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``3(LangExt.ISeq{``0},LangExt.ISeq{``1},System.Func{``0,``1,``2})">
            <summary>2個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``2(LangExt.ISeq{``0},LangExt.ISeq{``1})">
            <summary>2個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``2(LangExt.ISeq{System.Tuple{``0,``1}})">
            <summary>Zipされたシーケンスを元に戻し、2個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``4(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},System.Func{``0,``1,``2,``3})">
            <summary>3個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``3(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2})">
            <summary>3個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``3(LangExt.ISeq{System.Tuple{``0,``1,``2}})">
            <summary>Zipされたシーケンスを元に戻し、3個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``5(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>4個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``4(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3})">
            <summary>4個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}})">
            <summary>Zipされたシーケンスを元に戻し、4個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``6(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``5(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4})">
            <summary>5個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>Zipされたシーケンスを元に戻し、5個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``7(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``6(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5})">
            <summary>6個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>Zipされたシーケンスを元に戻し、6個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``8(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``7(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6})">
            <summary>7個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Zipされたシーケンスを元に戻し、7個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``9(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``8(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7})">
            <summary>8個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>Zipされたシーケンスを元に戻し、8個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``10(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``9(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8})">
            <summary>9個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}})">
            <summary>Zipされたシーケンスを元に戻し、9個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``11(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``10(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9})">
            <summary>10個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}})">
            <summary>Zipされたシーケンスを元に戻し、10個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``12(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``11(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10})">
            <summary>11個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}})">
            <summary>Zipされたシーケンスを元に戻し、11個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``13(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``12(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11})">
            <summary>12個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}})">
            <summary>Zipされたシーケンスを元に戻し、12個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``14(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``13(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12})">
            <summary>13個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}})">
            <summary>Zipされたシーケンスを元に戻し、13個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``15(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``14(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13})">
            <summary>14個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}})">
            <summary>Zipされたシーケンスを元に戻し、14個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``16(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``15(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14})">
            <summary>15個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}})">
            <summary>Zipされたシーケンスを元に戻し、15個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.ZipWith``17(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14},LangExt.ISeq{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        </member>
        <member name="M:LangExt.Seq.Zip``16(LangExt.ISeq{``0},LangExt.ISeq{``1},LangExt.ISeq{``2},LangExt.ISeq{``3},LangExt.ISeq{``4},LangExt.ISeq{``5},LangExt.ISeq{``6},LangExt.ISeq{``7},LangExt.ISeq{``8},LangExt.ISeq{``9},LangExt.ISeq{``10},LangExt.ISeq{``11},LangExt.ISeq{``12},LangExt.ISeq{``13},LangExt.ISeq{``14},LangExt.ISeq{``15})">
            <summary>16個のシーケンスをZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.Unzip``16(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}}})">
            <summary>Zipされたシーケンスを元に戻し、16個のシーケンスのタプルとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``1(LangExt.ISeq{``0})">
            <summary>シーケンスに対して、0から始まる整数列をZipします。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``2(LangExt.ISeq{System.Tuple{``0,``1}})">
            <summary>2要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``3(LangExt.ISeq{System.Tuple{``0,``1,``2}})">
            <summary>3要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``4(LangExt.ISeq{System.Tuple{``0,``1,``2,``3}})">
            <summary>4要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``5(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>5要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``6(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5}})">
            <summary>6要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``7(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>7要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``8(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}}})">
            <summary>8要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``9(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}}})">
            <summary>9要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``10(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}}})">
            <summary>10要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``11(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}}})">
            <summary>11要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``12(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}}})">
            <summary>12要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``13(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}}})">
            <summary>13要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``14(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}}})">
            <summary>14要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="M:LangExt.Seq.WithIndex``15(LangExt.ISeq{System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}}})">
            <summary>15要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        </member>
        <member name="T:LangExt.ObjectModule">
            <summary>
            Objectに対する関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.IsNull(System.Object)">
            <summary>
            オブジェクトがnullかどうかを判定します。
            </summary>
            <param name="self">判定の対象</param>
            <returns>オブジェクトがnullの場合true、nullではない場合false</returns>
        </member>
        <member name="M:LangExt.ObjectModule.IsNotNull(System.Object)">
            <summary>
            オブジェクトがnullかどうかを判定します。
            </summary>
            <param name="self">判定の対象</param>
            <returns>オブジェクトがnullの場合false、nullではない場合true</returns>
        </member>
        <member name="M:LangExt.ObjectModule.IsEqualTo(System.Object,System.Object)">
            <summary>
            null安全にEqualsを呼び出します。
            関数を値として使用したい場合は、こちらではなくEqを使用してください。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.IsNotEqualTo(System.Object,System.Object)">
            <summary>
            null安全にEqualsを呼び出し、結果を反転させます。
            関数を値として使用したい場合は、こちらではなくNotEqを使用してください。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.Eq(System.Object,System.Object)">
            <summary>
            関数としてnull安全なEqualsの呼び出しを行いたい場合に使用します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NotEq(System.Object,System.Object)">
            <summary>
            関数としてnull安全なEqualsの呼び出しと否定を行いたい場合に使用します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.ToStr(System.Object)">
            <summary>
            null安全にToStringを呼び出します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``1(``0,``0)">
            <summary>
            自身がxと等しい場合Noneを返し、そうでない場合Someを返します。
            自身がnullかつxがnullではなかったときのみ、このメソッドは例外を投げます。
            自身もxもnullだった場合は、Noneを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``1(``0,System.Func{System.Boolean})">
            <summary>
            predがtrueを返す場合Noneを返し、falseを返す場合Someを返します。
            自身がnullかつpredがfalseを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            自身がnullでpredがtrueを返した場合は、Noneを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIf``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            predがtrueを返す場合Noneを返し、falseを返す場合Someを返します。
            自身がnullかつpredがfalseを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            自身がnullでpredがtrueを返した場合は、Noneを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.NoneIfNull``1(``0)">
            <summary>
            自身がnullの場合のみNoneを返し、それ以外の場合はSomeを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``1(``0,``0)">
            <summary>
            自身がxと等しい場合Failureを返し、そうでない場合Successを返します。
            自身がnullかつxがnullではなかったときのみ、このメソッドは例外を投げます。
            自身もxもnullだった場合は、Failureを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``1(``0,System.Func{System.Boolean})">
            <summary>
            predがtrueを返す場合Failureを返し、falseを返す場合Successを返します。
            自身がnullかつpredがfalseを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            自身がnullでpredがtrueを返した場合は、Failureを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIf``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            predがtrueを返す場合Failureを返し、falseを返す場合Successを返します。
            自身がnullかつpredがfalseを返した場合は、例外を投げます。
            また、predが例外を投げた場合も例外を投げます。
            自身がnullでpredがtrueを返した場合は、Failureを返します。
            </summary>
        </member>
        <member name="M:LangExt.ObjectModule.FailureIfNull``1(``0)">
            <summary>
            自身がnullの場合のみFailureを返し、それ以外の場合はSuccessを返します。
            </summary>
        </member>
        <member name="T:LangExt.Option">
            <summary>
            Optionに対する関数を提供します。
            例外を投げうる関数は、Unsafe名前空間のSeqモジュールで提供しています。
            </summary>
        </member>
        <member name="M:LangExt.Option.Create``1(``0)">
            <summary>
            valueがnullでない場合はOption.Some(value)と、
            valueがnullの場合はOption.Noneと同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するOptionの要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合None、そうでない場合Some</returns>
        </member>
        <member name="M:LangExt.Option.Create``1(System.Nullable{``0})">
            <summary>
            valueがnullでない場合はOption.Some(value.Value)と、
            valueがnullの場合はOption.Noneと同じオブジェクトを返します。
            </summary>
            <typeparam name="T">生成するOptionの要素の型</typeparam>
            <param name="value">値</param>
            <returns>valueがnullの場合None、そうでない場合Some</returns>
        </member>
        <member name="M:LangExt.Option.Some``1(``0)">
            <summary>
            valueを格納するOptionを生成します。
            valueとしてnullを格納することは出来ません。
            </summary>
            <typeparam name="T">Someに保持する値の型</typeparam>
            <param name="value">Someに保持する値</param>
            <returns>Some(value)</returns>
        </member>
        <member name="M:LangExt.Option.FromFunc``1(System.Func{``0})">
            <summary>
            失敗しうる無引数関数からOptionを生成します。
            この関数は、例外を使用するAPIとOptionを使ったAPIの橋渡しをします。
            </summary>
            <typeparam name="T">関数が成功した場合の型(戻り値の型)</typeparam>
            <param name="f">実行する関数</param>
            <returns>関数が成功した場合、結果をSomeで包んだ値。失敗した場合、None。</returns>
        </member>
        <member name="M:LangExt.Option.IsSome``1(LangExt.Option{``0})">
            <summary>
            値を持つかどうかを取得する関数が必要な時に使います。
            Option[T]がプロパティとしてIsSomeを持つため、拡張メソッドにはしていません。
            </summary>
        </member>
        <member name="M:LangExt.Option.IsNone``1(LangExt.Option{``0})">
            <summary>
            値を持たないかどうかを取得する関数が必要な時に使います。
            Option[T]がプロパティとしてIsNoneを持つため、拡張メソッドにはしていません。
            </summary>
        </member>
        <member name="M:LangExt.Option.Empty``1">
            <summary>
            () → Option[T]
            </summary>
        </member>
        <member name="M:LangExt.Option.Maybe``2(LangExt.Option{``0},``1,System.Func{``0,``1})">
            <summary>
            (Option[T], U, T → U) → U
            </summary>
        </member>
        <member name="M:LangExt.Option.Fold``2(LangExt.Option{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            (Option[T], U, ((U, T) → U)) → U
            </summary>
        </member>
        <member name="M:LangExt.Option.Filter``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Option[T], (T → bool)) → Option[T]
            </summary>
        </member>
        <member name="M:LangExt.Option.Map``2(LangExt.Option{``0},System.Func{``0,``1})">
            <summary>
            (Option[T], (T → U)) → Option[U]
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``1(LangExt.Option{``0},System.Action{``0})">
            <summary>
            (Option[T], (T → void)) → void
            </summary>
        </member>
        <member name="M:LangExt.Option.Iter``1(LangExt.Option{``0},System.Func{``0,LangExt.Unit})">
            <summary>
            (Option[T], (T → Unit)) → Unit
            </summary>
        </member>
        <member name="M:LangExt.Option.IsEmpty``1(LangExt.Option{``0})">
            <summary>
            Option[T] → bool
            </summary>
        </member>
        <member name="M:LangExt.Option.IsNotEmpty``1(LangExt.Option{``0})">
            <summary>
            Option[T] → bool
            </summary>
        </member>
        <member name="M:LangExt.Option.Exists``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Option[T], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Option.Forall``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Option[T], (T → bool)) → bool
            </summary>
        </member>
        <member name="M:LangExt.Option.Len``1(LangExt.Option{``0})">
            <summary>
            Option[T] → int
            </summary>
        </member>
        <member name="M:LangExt.Option.Count``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            (Option[T], (T → bool)) → int
            </summary>
        </member>
        <member name="M:LangExt.Option.ToArray``1(LangExt.Option{``0})">
            <summary>
            Option[T] → T[]
            </summary>
        </member>
        <member name="M:LangExt.Option.ToSeq``1(LangExt.Option{``0})">
            <summary>
            Option[T] → ISeq[T]
            </summary>
        </member>
        <member name="M:LangExt.Option.ToResult``1(LangExt.Option{``0})">
            <summary>
            Option[T] → Result[T, Unit]
            </summary>
        </member>
        <member name="M:LangExt.Option.Select``2(LangExt.Option{``0},System.Func{``0,``1})">
            <summary>
            クエリ式でOptionを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Where``1(LangExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            クエリ式でOptionを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Option.SelectMany``3(LangExt.Option{``0},System.Func{``0,LangExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            クエリ式でOptionを扱うためのメソッドです。
            </summary>
        </member>
        <member name="M:LangExt.Option.Cast``1(LangExt.Option{LangExt.Placeholder})">
            <summary>
            クエリ式でOptionを扱うためのメソッドです。
            </summary>
        </member>
        <member name="P:LangExt.Option.None">
            <summary>
            値がないことを表すOption型の値(None)を取得します。 
            </summary>
        </member>
        <member name="T:LangExt.Option`1">
            <summary>
            nullよりも安全に「値がないこと」を表すことのできるデータ型です。
            </summary>
            <remarks>
            この型は値のある「Some」と、値がない「None」を表すことができ、
            デフォルトではNoneとなります。
            また、任意の型からの暗黙変換を定義しており、この場合を保持するSomeとなります。
            </remarks>
            <typeparam name="T">値の型</typeparam>
        </member>
        <member name="M:LangExt.Option`1.#ctor(`0)">
            <summary>
            値を指定して明示的にSomeを生成します。
            基本的にはこのコンストラクタを直接使用せずに、
            Option.Someメソッドを使用してください。
            引数にnullを指定すると、ArgumentNullExceptionが投げられます。
            これにより、Optionが値を持つ場合、その値がnullではないことが保証されます。
            </summary>
            <param name="value">Optionに格納する値</param>
        </member>
        <member name="M:LangExt.Option`1.op_Implicit(LangExt.Option{LangExt.Placeholder})~LangExt.Option{`0}">
            <summary>
            Option.Noneで取得したオブジェクトを、任意のTのNoneに暗黙変換します。
            </summary>
            <param name="value">Option.None</param>
            <returns>任意のTのNone</returns>
        </member>
        <member name="M:LangExt.Option`1.GetOr(`0)">
            <summary>
            Someの場合、保持された値を取り出します。
            Noneの場合、引数に指定した値を返します。
            </summary>
            <param name="defaultValue">Noneの場合の戻り値</param>
            <returns>Someの場合保持している値。Noneの場合引数で指定した値</returns>
        </member>
        <member name="M:LangExt.Option`1.GetOrElse(System.Func{`0})">
            <summary>
            Someの場合、保持された値を取り出します。
            Noneの場合、引数に指定した関数の実行結果を返します。
            </summary>
            <param name="defaultF">Noneの場合の戻り値を返す関数</param>
            <returns>Someの場合保持している値。Noneの場合引数で指定した関数が返す値</returns>
        </member>
        <member name="M:LangExt.Option`1.Match``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            擬似的にパターンマッチを行います。
            値がある場合とない場合の両方で何らかの処理を行う必要がある際に使用します。
            </summary>
            <typeparam name="U">パターンマッチが返す処理の型</typeparam>
            <param name="Some">Someの場合の処理</param>
            <param name="None">Noneの場合の処理</param>
            <returns>処理が返した値</returns>
        </member>
        <member name="M:LangExt.Option`1.Match(System.Action{`0},System.Action)">
            <summary>
            擬似的にパターンマッチを行います。
            値がある場合とない場合の両方で何らかの処理を行う必要がある際に使用します。
            </summary>
            <param name="Some">Someの場合の処理</param>
            <param name="None">Noneの場合の処理</param>
        </member>
        <member name="M:LangExt.Option`1.Bind``1(System.Func{`0,LangExt.Option{``0}})">
            <summary>
            T型のOptionをU型のオプションに変換します。
            値がある場合のみに変換を適用します。
            変換は、T型を受け取りU型のOptionを返す関数として指定します。
            </summary>
            <typeparam name="U">変換先の型</typeparam>
            <param name="f">変換に用いる関数</param>
            <returns>変換した値</returns>
        </member>
        <member name="M:LangExt.Option`1.Equals(LangExt.Option{`0})">
            <summary>
            現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="other">このオブジェクトと比較するOption</param>
            <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.Equals(System.Object)">
            <summary>
            現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
            </summary>
            <param name="obj">このオブジェクトと比較するオブジェクト</param>
            <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.op_Equality(LangExt.Option{`0},LangExt.Option{`0})">
            <summary>
            2つのOptionの比較を行います。 
            </summary>
            <param name="a">1つ目のOption</param>
            <param name="b">2つ目のOption</param>
            <returns>2つのOptionが等しい場合はtrue、それ以外の場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.op_Inequality(LangExt.Option{`0},LangExt.Option{`0})">
            <summary>
            2つのOptionの比較を行います。 
            </summary>
            <param name="a">1つ目のOption</param>
            <param name="b">2つ目のOption</param>
            <returns>2つのOptionが等しい場合はfalse、それ以外の場合はtrue</returns>
        </member>
        <member name="M:LangExt.Option`1.op_True(LangExt.Option{`0})">
            <summary>
            Optionが値を持つかどうかを判定します。
            </summary>
            <param name="x">判定の対象</param>
            <returns>値を持つ場合はtrue、持たない場合はfalse</returns>
        </member>
        <member name="M:LangExt.Option`1.op_False(LangExt.Option{`0})">
            <summary>
            Optionが値を持たないかどうかを判定します。
            </summary>
            <param name="x">判定の対象</param>
            <returns>値を持つ場合はfalse、持たない場合はtrue</returns>
        </member>
        <member name="M:LangExt.Option`1.OrElse(System.Func{LangExt.Option{`0}})">
            <summary>
            自身が値を持つ場合は自身を、そうでない場合はelsePartの結果を返します。
            Optionは短絡のor演算子を提供しているため、そちらを使用したほうが効率的です。
            </summary>
            <param name="elsePart">自身が値を持たなかった場合の値を返す関数</param>
            <returns>自身が値を持つ場合は自身、値を持たない場合はelsePartの結果</returns>
        </member>
        <member name="M:LangExt.Option`1.AndThen``1(System.Func{LangExt.Option{``0}})">
            <summary>
            自身とthenPartの結果の両方が値を持つ場合はthenPartの結果を、
            そうでない場合はNoneを返します。
            Optionは短絡のand演算子を提供しているため、そちらを使用したほうが効率的です。
            </summary>
            <param name="thenPart">自身が値を持つ場合の値を返す関数</param>
            <returns>自身とthenPartの結果の両方が値を持つ場合はthenPartの結果、どちらか一方でも値を持たなかった場合はNone</returns>
        </member>
        <member name="M:LangExt.Option`1.op_BitwiseOr(LangExt.Option{`0},LangExt.Option{`0})">
            <summary>
            左辺のOptionが値を持つ場合は左辺を、そうでない場合は右辺を返します。
            通常、直接使用せず、短絡演算子として使用します。
            </summary>
            <param name="a">1つ目のOption</param>
            <param name="b">2つ目のOption</param>
            <returns>左辺のOptionが値を持つ場合は左辺、それ以外の場合は右辺</returns>
        </member>
        <member name="M:LangExt.Option`1.op_BitwiseAnd(LangExt.Option{`0},LangExt.Option{`0})">
            <summary>
            両辺のOptionが値を持つ場合は右辺を、そうでない場合はNoneを返します。
            通常、直接使用せず、短絡演算子として使用します。
            </summary>
            <param name="a">1つ目のOption</param>
            <param name="b">2つ目のOption</param>
            <returns>両辺のOptionが値を持つ場合は右辺を、一方でも値を持たない場合はNone</returns>
        </member>
        <member name="M:LangExt.Option`1.GetHashCode">
            <summary>
            オブジェクトのハッシュコードを取得します。
            </summary>
            <returns>ハッシュコード</returns>
        </member>
        <member name="M:LangExt.Option`1.ToString">
            <summary>
            このオブジェクトを文字列表現に変換します。
            </summary>
            <returns>このオブジェクトの文字列表現</returns>
        </member>
        <member name="P:LangExt.Option`1.None">
            <summary>
            任意の型のNoneを取得します。
            基本的にはこのプロパティを直接使用せずに、
            Option.Noneプロパティを使用してください。
            </summary>
        </member>
        <member name="P:LangExt.Option`1.IsSome">
            <summary>
            このオブジェクトが値を持つかどうかを取得します。
            制御構文内でboolが必要な場所に対しては、IsSomeやIsNoneではなく、Optionオブジェクトをそのまま使用することも可能です。
            </summary>
        </member>
        <member name="P:LangExt.Option`1.IsNone">
            <summary>
            このオブジェクトが値を持たないかどうかを取得します。
            制御構文内でboolが必要な場所に対しては、IsSomeやIsNoneではなく、Optionオブジェクトをそのまま使用することも可能です。
            </summary>
        </member>
        <member name="T:LangExt.Placeholder">
            <summary>
            プレースホルダーとして使用することを前提とした型です。
            </summary>
        </member>
        <member name="T:LangExt.Unit">
            <summary>
            値がないことを表すための型です。
            </summary>
        </member>
        <member name="F:LangExt.Unit._">
            <summary>
            Unit型の唯一の値として使用するための列挙子です。
            </summary>
        </member>
        <member name="T:LangExt.ISumStrategy`1">
            <summary>
            Tの総和の計算を行う戦略を表すインターフェイスです。
            </summary>
            <typeparam name="T">総和を計算する型</typeparam>
        </member>
        <member name="M:LangExt.ISumStrategy`1.Plus(`0,`0)">
            <summary>
            Tを加算する演算です。
            可換であることは、このインターフェイスでは求めていません。
            </summary>
        </member>
        <member name="P:LangExt.ISumStrategy`1.Zero">
            <summary>
            Tの加算に対する単位元を取得します。
            </summary>
        </member>
        <member name="T:LangExt.SumStrategy">
            <summary>
            よく使用するISumStrategyの生成を簡略化するためのクラスです。
            </summary>
        </member>
        <member name="M:LangExt.SumStrategy.Create``1(``0,System.Func{``0,``0,``0})">
            <summary>
            ゼロ値と加算のための関数からISumStrategyを生成します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.Decimal">
            <summary>
            decimalに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.Double">
            <summary>
            doubleに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.Float">
            <summary>
            floatに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.TimeSpan">
            <summary>
            System.TimeSpanに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="P:LangExt.SumStrategy.String">
            <summary>
            stringに対するISumStrategyを返します。
            </summary>
        </member>
        <member name="T:LangExt.TupleModule">
            <summary>タプルに対する関数を提供します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``2(``0,``1)">
            <summary>2要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``2(System.Tuple{``0,``1})">
            <summary>2要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``2(System.Tuple{``0,``1})">
            <summary>2要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``2(System.Tuple{``0,``1})">
            <summary>2要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``2(System.Tuple{``0,``1})">
            <summary>2要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``3(System.Tuple{``0,``1},``2)">
            <summary>2要素タプルに要素を追加し、3要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``3(System.Tuple{``0,``1},System.Func{``0,``1,``2})">
            <summary>2要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``3(System.Tuple{``0,``1},System.Func{``0,``2})">
            <summary>2要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``3(System.Tuple{``0,``1},System.Func{``1,``2})">
            <summary>2要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``3(``0,``1,``2)">
            <summary>3要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``4(System.Tuple{``0,``1,``2},``3)">
            <summary>3要素タプルに要素を追加し、4要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``3(System.Tuple{``0,``1,``2})">
            <summary>3要素タプルから末尾要素を削除し、2要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``4(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,``3})">
            <summary>3要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``4(System.Tuple{``0,``1,``2},System.Func{``0,``3})">
            <summary>3要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``4(System.Tuple{``0,``1,``2},System.Func{``1,``3})">
            <summary>3要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``4(System.Tuple{``0,``1,``2},System.Func{``2,``3})">
            <summary>3要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``4(``0,``1,``2,``3)">
            <summary>4要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``5(System.Tuple{``0,``1,``2,``3},``4)">
            <summary>4要素タプルに要素を追加し、5要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``4(System.Tuple{``0,``1,``2,``3})">
            <summary>4要素タプルから末尾要素を削除し、3要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>4要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``4})">
            <summary>4要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``5(System.Tuple{``0,``1,``2,``3},System.Func{``1,``4})">
            <summary>4要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``5(System.Tuple{``0,``1,``2,``3},System.Func{``2,``4})">
            <summary>4要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``5(System.Tuple{``0,``1,``2,``3},System.Func{``3,``4})">
            <summary>4要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``5(``0,``1,``2,``3,``4)">
            <summary>5要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``6(System.Tuple{``0,``1,``2,``3,``4},``5)">
            <summary>5要素タプルに要素を追加し、6要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>5要素タプルから末尾要素を削除し、4要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>5要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``5})">
            <summary>5要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``1,``5})">
            <summary>5要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``2,``5})">
            <summary>5要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``3,``5})">
            <summary>5要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``4,``5})">
            <summary>5要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>6要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``7(System.Tuple{``0,``1,``2,``3,``4,``5},``6)">
            <summary>6要素タプルに要素を追加し、7要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>6要素タプルから末尾要素を削除し、5要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>6要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``6})">
            <summary>6要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``1,``6})">
            <summary>6要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``2,``6})">
            <summary>6要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``3,``6})">
            <summary>6要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``4,``6})">
            <summary>6要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``5,``6})">
            <summary>6要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>7要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},``7)">
            <summary>7要素タプルに要素を追加し、8要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>7要素タプルから末尾要素を削除し、6要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>7要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``7})">
            <summary>7要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``1,``7})">
            <summary>7要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``2,``7})">
            <summary>7要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``3,``7})">
            <summary>7要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``4,``7})">
            <summary>7要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``5,``7})">
            <summary>7要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``6,``7})">
            <summary>7要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>8要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``8)">
            <summary>8要素タプルに要素を追加し、9要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>8要素タプルから末尾要素を削除し、7要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>8要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``0,``8})">
            <summary>8要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``1,``8})">
            <summary>8要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``2,``8})">
            <summary>8要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``3,``8})">
            <summary>8要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``4,``8})">
            <summary>8要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``5,``8})">
            <summary>8要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``6,``8})">
            <summary>8要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},System.Func{``7,``8})">
            <summary>8要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>9要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``9)">
            <summary>9要素タプルに要素を追加し、10要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>9要素タプルから末尾要素を削除し、8要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>9要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``0,``9})">
            <summary>9要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``1,``9})">
            <summary>9要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``2,``9})">
            <summary>9要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``3,``9})">
            <summary>9要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``4,``9})">
            <summary>9要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``5,``9})">
            <summary>9要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``6,``9})">
            <summary>9要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``7,``9})">
            <summary>9要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},System.Func{``8,``9})">
            <summary>9要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>10要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``10)">
            <summary>10要素タプルに要素を追加し、11要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>10要素タプルから末尾要素を削除し、9要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>10要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``0,``10})">
            <summary>10要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``1,``10})">
            <summary>10要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``2,``10})">
            <summary>10要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``3,``10})">
            <summary>10要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``4,``10})">
            <summary>10要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``5,``10})">
            <summary>10要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``6,``10})">
            <summary>10要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``7,``10})">
            <summary>10要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``8,``10})">
            <summary>10要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},System.Func{``9,``10})">
            <summary>10要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>11要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``11)">
            <summary>11要素タプルに要素を追加し、12要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>11要素タプルから末尾要素を削除し、10要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>11要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``0,``11})">
            <summary>11要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``1,``11})">
            <summary>11要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``2,``11})">
            <summary>11要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``3,``11})">
            <summary>11要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``4,``11})">
            <summary>11要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``5,``11})">
            <summary>11要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``6,``11})">
            <summary>11要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``7,``11})">
            <summary>11要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``8,``11})">
            <summary>11要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``9,``11})">
            <summary>11要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},System.Func{``10,``11})">
            <summary>11要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>12要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``12)">
            <summary>12要素タプルに要素を追加し、13要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>12要素タプルから末尾要素を削除し、11要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>12要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``0,``12})">
            <summary>12要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``1,``12})">
            <summary>12要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``2,``12})">
            <summary>12要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``3,``12})">
            <summary>12要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``4,``12})">
            <summary>12要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``5,``12})">
            <summary>12要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``6,``12})">
            <summary>12要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``7,``12})">
            <summary>12要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``8,``12})">
            <summary>12要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``9,``12})">
            <summary>12要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``10,``12})">
            <summary>12要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},System.Func{``11,``12})">
            <summary>12要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>13要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._13``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから13番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``13)">
            <summary>13要素タプルに要素を追加し、14要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>13要素タプルから末尾要素を削除し、12要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>13要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``0,``13})">
            <summary>13要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``1,``13})">
            <summary>13要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``2,``13})">
            <summary>13要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``3,``13})">
            <summary>13要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``4,``13})">
            <summary>13要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``5,``13})">
            <summary>13要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``6,``13})">
            <summary>13要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``7,``13})">
            <summary>13要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``8,``13})">
            <summary>13要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``9,``13})">
            <summary>13要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``10,``13})">
            <summary>13要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``11,``13})">
            <summary>13要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map13``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},System.Func{``12,``13})">
            <summary>13要素タプルの13番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>14要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._13``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから13番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._14``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから14番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``14)">
            <summary>14要素タプルに要素を追加し、15要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>14要素タプルから末尾要素を削除し、13要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>14要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``0,``14})">
            <summary>14要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``1,``14})">
            <summary>14要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``2,``14})">
            <summary>14要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``3,``14})">
            <summary>14要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``4,``14})">
            <summary>14要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``5,``14})">
            <summary>14要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``6,``14})">
            <summary>14要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``7,``14})">
            <summary>14要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``8,``14})">
            <summary>14要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``9,``14})">
            <summary>14要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``10,``14})">
            <summary>14要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``11,``14})">
            <summary>14要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map13``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``12,``14})">
            <summary>14要素タプルの13番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map14``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},System.Func{``13,``14})">
            <summary>14要素タプルの14番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>15要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._13``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから13番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._14``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから14番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._15``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから15番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Add``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``15)">
            <summary>15要素タプルに要素を追加し、16要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>15要素タプルから末尾要素を削除し、14要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>15要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``0,``15})">
            <summary>15要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``1,``15})">
            <summary>15要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``2,``15})">
            <summary>15要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``3,``15})">
            <summary>15要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``4,``15})">
            <summary>15要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``5,``15})">
            <summary>15要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``6,``15})">
            <summary>15要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``7,``15})">
            <summary>15要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``8,``15})">
            <summary>15要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``9,``15})">
            <summary>15要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``10,``15})">
            <summary>15要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``11,``15})">
            <summary>15要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map13``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``12,``15})">
            <summary>15要素タプルの13番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map14``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``13,``15})">
            <summary>15要素タプルの14番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map15``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},System.Func{``14,``15})">
            <summary>15要素タプルの15番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Create``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>16要素のタプルを生成します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Fst``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Snd``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._1``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから1番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._2``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから2番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._3``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから3番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._4``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから4番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._5``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから5番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._6``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから6番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._7``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから7番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._8``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから8番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._9``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから9番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._10``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから10番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._11``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから11番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._12``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから12番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._13``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから13番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._14``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから14番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._15``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから15番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule._16``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから16番目の要素を取り出します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.RemoveLast``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>16要素タプルから末尾要素を削除し、15要素タプルを生成します。主にコードの自動生成用に使用されます。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Match``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>16要素タプルに対して、擬似的にパターンマッチを行います。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map1``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``0,``16})">
            <summary>16要素タプルの1番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map2``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``1,``16})">
            <summary>16要素タプルの2番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map3``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``2,``16})">
            <summary>16要素タプルの3番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map4``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``3,``16})">
            <summary>16要素タプルの4番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map5``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``4,``16})">
            <summary>16要素タプルの5番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map6``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``5,``16})">
            <summary>16要素タプルの6番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map7``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``6,``16})">
            <summary>16要素タプルの7番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map8``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``7,``16})">
            <summary>16要素タプルの8番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map9``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``8,``16})">
            <summary>16要素タプルの9番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map10``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``9,``16})">
            <summary>16要素タプルの10番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map11``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``10,``16})">
            <summary>16要素タプルの11番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map12``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``11,``16})">
            <summary>16要素タプルの12番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map13``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``12,``16})">
            <summary>16要素タプルの13番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map14``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``13,``16})">
            <summary>16要素タプルの14番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map15``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``14,``16})">
            <summary>16要素タプルの15番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="M:LangExt.TupleModule.Map16``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},System.Func{``15,``16})">
            <summary>16要素タプルの16番目の要素に対して、関数を適用します。</summary>
        </member>
        <member name="T:LangExt.Unsafe.Option">
            <summary>
            Optionに対する(例外を投げうる)関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Option.GetValue``1(LangExt.Option{``0})">
            <summary>
            保持している値を強制的に取得します。
            このメソッドはNoneの場合に意味のない値(default(T))を返すため、危険です。
            そのため、このメソッドは基本的には使用せず、
            MatchメソッドやGetOrメソッドを使用するようにしてください。
            </summary>
            <returns>内部で保持している値</returns>
        </member>
        <member name="T:LangExt.Unsafe.Result">
            <summary>
            Resultに対する(例外を投げうる)関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Result.GetSuccessValue``2(LangExt.Result{``0,``1})">
            <summary>
            保持している成功の値を強制的に取得します。
            このメソッドはFailureの場合に意味のない値(default(TFailure))を返すため、危険です。
            そのため、このメソッドは基本的には使用せず、MatchメソッドやGetOrメソッドを使用するようにしてください。
            </summary>
            <returns>内部で保持している成功の値</returns>
        </member>
        <member name="M:LangExt.Unsafe.Result.GetFailureValue``2(LangExt.Result{``0,``1})">
            <summary>
            保持している失敗の値を強制的に取得します。
            このメソッドはSuccessの場合に意味のない値(default(TSuccess))を返すため、危険です。
            そのため、このメソッドは基本的には使用せず、MatchメソッドやGetFailureOrメソッドを使用するようにしてください。
            </summary>
            <returns>内部で保持している失敗の値</returns>
        </member>
        <member name="T:LangExt.Unsafe.Seq">
            <summary>
            シーケンスに対する(例外を投げうる)関数を提供します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.Get``1(LangExt.ISeq{``0},System.Int32)">
            <summary>
            シーケンスの指定番目の要素を取得します。
            標準クエリ演算子のElementAtに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.Max``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの最大値を求めます。
            標準クエリ演算子のMaxに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.MaxWith``1(LangExt.ISeq{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            任意の型のシーケンスの最大値を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.MaxBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            任意の型のシーケンスの最大値を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.Min``1(LangExt.ISeq{``0})">
            <summary>
            シーケンスの最小値を求めます。
            標準クエリ演算子のMinに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.MinWith``1(LangExt.ISeq{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            任意の型のシーケンスの最小値を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.MinBy``2(LangExt.ISeq{``0},System.Func{``0,``1})">
            <summary>
            任意の型のシーケンスの最小値を求めます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.Reduce``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスを先頭から畳み込みます。
            標準クエリ演算子のAggregateに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.ReduceBack``1(LangExt.ISeq{``0},System.Func{``0,``0,``0})">
            <summary>
            シーケンスを末尾から畳み込みます。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.Find``1(LangExt.ISeq{``0},System.Func{``0,System.Boolean})">
            <summary>
            シーケンスから、predを満たす最初の要素を探索します。
            標準クエリ演算子のFirstに対応します。
            </summary>
        </member>
        <member name="M:LangExt.Unsafe.Seq.Pick``2(LangExt.ISeq{``0},System.Func{``0,LangExt.Option{``1}})">
            <summary>
            シーケンスから、fがSomeを返す最初の要素を探索し、Someの中身を返します。
            対応する標準クエリ演算子はありません。
            </summary>
        </member>
    </members>
</doc>

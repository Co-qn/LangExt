<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\T4\T4Util.ttinclude" #>
using System;
using System.Collections.Generic;
using System.ComponentModel;

namespace LangExt
{
    /// <summary>
    /// Choiceに対する操作を提供します。
    /// </summary>
    public static partial class Choice
    {
<#
for (int i = 2; i <= Max; i++) {
    var types = TypeParams("T", i);
#>
<#
for (int j = 0; j < i; j++) {
    var incomplTypesTemp = new List<string>();
    for (var tag = 0; tag < i; tag++) {
        if (tag == j)
            incomplTypesTemp.Add("T" + (tag + 1));
        else
            incomplTypesTemp.Add("Placeholder");
    }
    var incomplTypes = string.Join(", ", incomplTypesTemp);
#>
        /// <summary>
        /// T<#= j + 1 #>を含む<#= i #>要素の不完全Choiceオブジェクトを生成します。
        /// </summary>
        public static Choice<<#= incomplTypes #>> CreateCase<#= j + 1 #>Of<#= i #><T<#= j + 1 #>>(T<#= j + 1 #> value)
        {
            return new Choice<<#= incomplTypes #>>(value);
        }

<# } #>
        /// <summary>
        /// 2つの同じ型パラメータを持つChoice[...]に対して、二項演算の適用を試みます。
        /// 保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
        /// </summary>
        public static Option<T> TryBinOp<<#= types #>, T>(Choice<<#= types #>> a, Choice<<#= types #>> b, <#= Repeat(", ", "Func<T{0}, T{0}, T> Case{0}", i) #>)
        {
            var aTag = a.TagIndex;
            var bTag = b.TagIndex;
<# for (int j = 0; j < i; j++) { #>
            if (aTag == <#= j + 1 #> && bTag == <#= j + 1 #>) return Option.Some(Case<#= j + 1 #>(a.Case<#= j + 1 #>.Value, b.Case<#= j + 1 #>.Value));
<# } #>
            return Option.None;
        }

        /// <summary>
        /// 2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算の適用を試みます。
        /// 保持する型が2つのオブジェクトで異なる場合、Noneが返されます。
        /// </summary>
        public static Option<T> TryBinOp<<#= types #>, T>(this Tuple<Choice<<#= types #>>, Choice<<#= types #>>> self, <#= Repeat(", ", "Func<T{0}, T{0}, T> Case{0}", i) #>)
        {
            return TryBinOp(self.Item1, self.Item2, <#= Repeat(", ", "Case{0}", i) #>);
        }

        /// <summary>
        /// 2つの同じ型パラメータを持つChoice[...]に対して、二項演算を適用します。
        /// 保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
        /// </summary>
        public static T BinOp<<#= types #>, T>(Choice<<#= types #>> a, Choice<<#= types #>> b, <#= Repeat(", ", "Func<T{0}, T{0}, T> Case{0}", i) #>, Func<int, int, T> Otherwise)
        {
            var aTag = a.TagIndex;
            var bTag = b.TagIndex;
<# for (int j = 0; j < i; j++) { #>
            if (aTag == <#= j + 1 #> && bTag == <#= j + 1 #>) return Case<#= j + 1 #>(a.Case<#= j + 1 #>.Value, b.Case<#= j + 1 #>.Value);
<# } #>
            return Otherwise(aTag, bTag);
        }

        /// <summary>
        /// 2つの同じ型パラメータを持つChoice[...]のタプルに対して、二項演算を適用します。
        /// 保持する型が2つのオブジェクトで異なる場合、保持する型のインデックスが渡される関数が呼び出されます。
        /// </summary>
        public static T BinOp<<#= types #>, T>(this Tuple<Choice<<#= types #>>, Choice<<#= types #>>> self, <#= Repeat(", ", "Func<T{0}, T{0}, T> Case{0}", i) #>, Func<int, int, T> Otherwise)
        {
            return BinOp(self.Item1, self.Item2, <#= Repeat(", ", "Case{0}", i) #>, Otherwise);
        }

        /// <summary>
        /// 全ての型パラメータがIComparable[T]を実装するChoice[...]どうしの大小関係を判断して返します。
        /// </summary>
        public static Comparable.CompareResult CompareTo<<#= types #>>(this Choice<<#= types #>> self, Choice<<#= types #>> other)
<# for (int j = 0; j < i; j++) { #>
            where T<#= j + 1 #> : IComparable<T<#= j +1 #>>
<# } #>
        {
            return BinOp(self, other, <#= Repeat(", ", "(a, b) => a.Cmp(b)", i + 1) #>);
        }

        /// <summary>
        /// 全ての型パラメータがIComparable[T]を実装するChoice[...]を比較するためのIComparer[Choice[...]]を取得します。
        /// </summary>
        public static IComparer<Choice<<#= types #>>> Comparer<<#= types #>>()
<# for (int j = 0; j < i; j++) { #>
            where T<#= j + 1 #> : IComparable<T<#= j +1 #>>
<# } #>
        {
            return new Comparer<Choice<<#= types #>>>((a, b) => a.CompareTo(b).Match(() => -1, () => 0, () => 1));
        }
<# } #>

        /// <summary>
        /// 使用しません。
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static new bool Equals(object a, object b)
        {
            return object.Equals(a, b);
        }

        /// <summary>
        /// 使用しません。
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public static new bool ReferenceEquals(object a, object b)
        {
            return object.ReferenceEquals(a, b);
        }
    }
}

<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\T4\T4Util.ttinclude" #>
using System;
using System.ComponentModel;

namespace LangExt
{
<#
for (int i = 2; i <= Max; i++) {
    var types = TypeParams("T", i);
#>
    /// <summary>
    /// 複数の型のうち、どれか一つを保持する「多者択一」を表す型です。
<# if (i == 2) { #>
    /// 成功と失敗を保持したい場合、この型ではなくResult[TSuccess, TFailure]型を使ってください。
    /// この型は、二つの型の違いにほとんど意味がない場合に使います。
<# } #>
    /// </summary>
    public sealed class Choice<<#= types #>> : IEquatable<Choice<<#= types #>>>
    {
<# for (int j = 0; j < i; j++) { #>
        internal readonly Option<T<#= j + 1 #>> Case<#= j + 1 #>;
<# } #>

        /// <summary>
        /// 何番目の型を保持しているかを取得します。
        /// </summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public int TagIndex { get { return this.Match(<#= Repeat(", ", "_ => {0}", i) #>); } }

<# for (int j = 0; j < i; j++) { #>
        /// <summary>
        /// T<#= j + 1 #>を保持するChoice[...]オブジェクトを生成します。
        /// </summary>
        public Choice(T<#= j + 1 #> value) { Case<#= j + 1 #> = new Option<T<#= j + 1 #>>(value); }

<# } #>
        /// <summary>
        /// 擬似的にパターンマッチを行います。
        /// </summary>
        public T Match<T>(<#= Repeat(", ", "Func<T{0}, T> Case{0}", i) #>)
        {
            Func<T> thrower = () => { throw new InvalidOperationException(); };
            return <#= Fold("() => this.Case" + i + ".Match<T>(Case" + i + ", thrower)", "() => this.Case{1}.Match<T>(Case{1}, {0})", i - 1).Substring("() => ".Length) #>;
        }

        /// <summary>
        /// 擬似的にパターンマッチを行います。
        /// </summary>
        public void Match(<#= Repeat(", ", "Action<T{0}> Case{0}", i) #>)
        {
            Action thrower = () => { throw new InvalidOperationException(); };
            <#= Fold("() => this.Case" + i + ".Match(Case" + i + ", thrower)", "() => this.Case{1}.Match(Case{1}, {0})", i - 1).Substring("() => ".Length) #>;
        }

        /// <summary>
        /// 現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを判定します。
        /// </summary>
        /// <param name="other">このオブジェクトと比較するChoice</param>
        /// <returns>現在のオブジェクトがotherで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        public bool Equals(Choice<<#= types #>> other)
        {
            return other.IsNotNull() && <#= Repeat(" && ", "Case{0} == other.Case{0}", i) #>;
        }

        /// <summary>
        /// 2つのChoceの比較を行います。 
        /// </summary>
        /// <param name="a">1つ目のChoice</param>
        /// <param name="b">2つ目のChoice</param>
        /// <returns>2つのChoiceが等しい場合はtrue、それ以外の場合はfalse</returns>
        public static bool operator ==(Choice<<#= types #>> a, Choice<<#= types #>> b)
        {
            if (a.IsNull())
                return b.IsNull();
            return a.Equals(b);
        }

        /// <summary>
        /// 2つのChoceの比較を行います。 
        /// </summary>
        /// <param name="a">1つ目のChoice</param>
        /// <param name="b">2つ目のChoice</param>
        /// <returns>2つのChoiceが等しい場合はfalse、それ以外の場合はtrue</returns>
        public static bool operator !=(Choice<<#= types #>> a, Choice<<#= types #>> b)
        {
            return !(a == b);
        }

        /// <summary>
        /// 現在のオブジェクトが、別のオブジェクトと等しいかどうかを判定します。
        /// </summary>
        /// <param name="obj">このオブジェクトと比較するオブジェクト</param>
        /// <returns>現在のオブジェクトがobjで指定されたオブジェクトと等しい場合はtrue、それ以外の場合はfalse</returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj)
        {
            var other = obj as Choice<<#= types #>>;
            if (other.IsNull())
                return false;
            return Equals(other);
        }

        /// <summary>
        /// オブジェクトのハッシュコードを取得します。
        /// </summary>
        /// <returns>ハッシュコード</returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode()
        {
            var result = 31;
<# for (int j = 0; j < i; j++) { #>
            result ^= Case<#= j + 1 #>.GetHashCode();
<# } #>
            return result;
        }

        /// <summary>
        /// このオブジェクトを文字列表現に変換します。
        /// </summary>
        /// <returns>このオブジェクトの文字列表現</returns>
        public override string ToString()
        {
            return Match(
<# for (int j = 0; j < i; j++) { #>
                t<#= j + 1 #> => string.Format("Choice({0}:{1})", t<#= j + 1 #>, typeof(T<#= j + 1 #>).Name)<#= (j + 1) != i ? "," : ""  #>
<# } #>
            );
        }
    }

<# } #>
    partial class Create
    {
<#
for (int i = 2; i <= Max; i++) {
    var types = TypeParams("T", i);
#>
<# for (int j = 0; j < i; j++) { #>
        /// <summary>
        /// T<#= j + 1 #>を含むChoice[...]オブジェクトを生成します。
        /// </summary>
        public static Choice<<#= types #>> Choice<<#= types #>>(T<#= j + 1 #> value)
        {
            return new Choice<<#= types #>>(value);
        }

<# } } #>
    }
}
<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="T4Util.ttinclude" #>
using System;

namespace LangExt
{
    partial class Func
    {
<#
for (int i = 2; i <= Max; i++) {
    var typeArgs = TypeParams("T", i + 1);
    var args = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("Func<T{0}, T{1}> f{0}", x, x + 1)));
    var calls = Enumerable.Range(1, i).Aggregate("x", (acc, x) => "f" + x + "(" + acc + ")");
#>
        /// <summary>
        /// 複数の関数を合成して一つの関数にします。
        /// </summary>
        public static Func<T1, T<#= i + 1 #>> Chain<<#= typeArgs #>>(<#= args #>)
        {
            return x => <#= calls #>;
        }

<# } #>
    }
}

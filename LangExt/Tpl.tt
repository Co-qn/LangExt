<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Config.ttinclude" #>
using System;

namespace LangExt
{
    /// <summary>
    /// N 要素のタプルを生成するためのクラスです。
    /// <#= Max #> 要素までのタプルに対応しています。
    /// </summary>
    public static partial class Tpl
    {
<# for (int i = 2; i <= Max; i++) { #>
        /// <summary>
        /// <#= i #> 要素のタプルを生成します。
        /// </summary>
        public static _<<#= Seq("T{0}", i) #>> Of<<#= Seq("T{0}", i) #>>(<#= Seq("T{0} t{0}", i) #>)
        {
            return new _<<#= Seq("T{0}", i) #>>(<#= Seq("t{0}", i) #>);
        }

<# } #>
    }

<#
for (int i = 2; i <= Max; i++) {
	var types = Seq("T{0}", i);
#>
    /// <summary>
    /// <#= i #> 要素のタプルを表します。
    /// </summary>
    public struct _<<#= types #>> : IEquatable<_<<#= types #>>>
    {
<# for (int j = 0; j < i; j++) { #>
        /// <summary>
        /// タプルの <#= j + 1 #> 番目の要素ですが、できる限り直接参照しないようにしてください。
        /// </summary>
        public readonly T<#= j + 1 #> _<#= j + 1 #>;
<# } #>

        internal _(<#= Seq("T{0} t{0}", i) #>)
        {
<# for (int j = 0; j < i; j++) { #>
            _<#= j + 1 #> = t<#= j + 1 #>;
<# } #>
        }

        #region IEquatable<Tpl<<#= types #>>> メンバ

        /// <summary>
        /// 現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。
        /// </summary>
        /// <param name="other">このオブジェクトと比較するタプル。</param>
        /// <returns>現在のオブジェクトが other パラメータと等しい場合は true。それ以外の場合は false。</returns>
        public bool Equals(_<<#= types #>> other)
        {
            return <#= Seq("Equals(_{0}, other._{0})", " && ", i) #>;
        }

        #endregion

        /// <summary>
        /// 現在のオブジェクトが、別のオブジェクトと等しいかどうかを示します。
        /// </summary>
        /// <param name="obj">このオブジェクトと比較するオブジェクト。</param>
        /// <returns>現在のオブジェクトが obj パラメータと等しい場合は true。それ以外の場合は false。</returns>
        public override bool Equals(object obj)
        {
            if (!(obj is _<<#= types #>>))
                return false;

            return Equals((_<<#= types #>>)obj);
        }

        /// <summary>
        /// 現在のオブジェクトのハッシュコードを取得します。
        /// </summary>
        /// <returns>現在のオブジェクトのハッシュコード。</returns>
        public override int GetHashCode()
        {
            var result = 31;
<# for (int j = 0; j < i; j++) { #>
            result ^= _<#= j + 1 #> == null ? 0 : _<#= j + 1 #>.GetHashCode();
<# } #>
            return result;
        }

        /// <summary>
        /// 2 つのタプルの比較を行います。
        /// </summary>
        /// <param name="a">1 つ目の Variant。</param>
        /// <param name="b">2 つ目の Variant。</param>
        /// <returns>2 つのタプルが等しい場合は true、それ以外の場合は false。</returns>
        public static bool operator ==(_<<#= types #>> a, _<<#= types #>> b)
        {
            return a.Equals(b);
        }

        /// <summary>
        /// 2 つのタプルの比較を行います。
        /// </summary>
        /// <param name="a">1 つ目の Variant。</param>
        /// <param name="b">2 つ目の Variant。</param>
        /// <returns>2 つのタプルが等しい場合は false、それ以外の場合は true。</returns>
        public static bool operator !=(_<<#= types #>> a, _<<#= types #>> b)
        {
            return !(a == b);
        }

        /// <summary>
        /// 現在のオブジェクトを文字列表現に変換します。
        /// </summary>
        /// <returns>現在のオブジェクトの文字列表現。</returns>
        public override string ToString()
        {
            return string.Format("(<#= Seq("{{{0}}}", 0, i) #>)", <#= Seq("_{0}", i) #>);
        }
    }
<# } #>
}
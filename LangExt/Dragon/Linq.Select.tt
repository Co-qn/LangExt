<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../Config.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace LangExt.Dragon
{
    partial class Linq
    {
<#
for (int i = 2; i <= Max; i++) {
	var types = Seq("T{0}", i);
	var args = Seq("t._{0}", i);
#>
        /// <summary>
        /// タプルのシーケンスの各要素を展開して selector に渡す map です。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TResult">selector によって返される値の型。</typeparam>
        /// <param name="self">変換関数を呼び出す対象となる値のシーケンス。</param>
        /// <param name="selector">各要素に適用する変換関数。</param>
        /// <returns>self の各要素に対して変換関数を適用した結果を要素に持つシーケンス。</returns>
        public static IEnumerable<TResult> Select<<#= types #>, TResult>(this IEnumerable<_<<#= types #>>> self, Func<<#= types #>, TResult> selector)
        {
            return self.Select(t => selector(<#= args #>));
        }

        /// <summary>
        /// タプルのシーケンスの各要素を展開して selector に渡す map です。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TResult">selector によって返される値の型。</typeparam>
        /// <param name="self">変換関数を呼び出す対象となる値のシーケンス。</param>
        /// <param name="selector">各要素に適用する変換関数。最後のパラメータにはインデックスが渡されます。</param>
        /// <returns>self の各要素に対して変換関数を適用した結果を要素に持つシーケンス。</returns>
        public static IEnumerable<TResult> Select<<#= types #>, TResult>(this IEnumerable<_<<#= types #>>> self, Func<<#= types #>, int, TResult> selector)
        {
            return self.Select((t, i) => selector(<#= args #>, i));
        }

<# } #>
    }
}
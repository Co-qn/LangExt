<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../Config.ttinclude" #>
using System;
using System.Collections.Generic;
using System.Linq;

namespace LangExt.Dragon
{
    partial class Linq
    {
<#
for (int i = 2; i <= Max; i++) {
	var types = Seq("T{0}", i);
	var args = Seq("t._{0}", i);
#>
        /// <summary>
        /// タプルのシーケンスの各要素を展開して keySelector に渡す sort です。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TKey">keySelector によって返されるキーの型。</typeparam>
        /// <param name="self">sort 対象のシーケンス。</param>
        /// <param name="keySelector">要素からキーを抽出する関数。</param>
        /// <returns>要素がキーに従って並べ替えられているシーケンス。</returns>
        public static IOrderedEnumerable<_<<#= types #>>> OrderBy<<#= types #>, TKey>(this IEnumerable<_<<#= types #>>> self, Func<<#= types #>, TKey> keySelector)
        {
            return self.OrderBy(t => keySelector(<#= args #>));
        }

        /// <summary>
        /// タプルのシーケンスの各要素を展開して keySelector に渡す sort です。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TKey">keySelector によって返されるキーの型。</typeparam>
        /// <param name="self">sort 対象のシーケンス。</param>
        /// <param name="keySelector">要素からキーを抽出する関数。</param>
        /// <param name="comparer">キーを比較するオブジェクト。</param>
        /// <returns>要素がキーに従って並べ替えられているシーケンス。</returns>
        public static IOrderedEnumerable<_<<#= types #>>> OrderBy<<#= types #>, TKey>(this IEnumerable<_<<#= types #>>> self, Func<<#= types #>, TKey> keySelector, IComparer<TKey> comparer)
        {
            return self.OrderBy(t => keySelector(<#= args #>), comparer);
        }

        /// <summary>
        /// タプルのシーケンスの各要素を展開して keySelector に渡す sort の降順版です。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TKey">keySelector によって返されるキーの型。</typeparam>
        /// <param name="self">sort 対象のシーケンス。</param>
        /// <param name="keySelector">要素からキーを抽出する関数。</param>
        /// <returns>要素がキーに従って並べ替えられているシーケンス。</returns>
        public static IOrderedEnumerable<_<<#= types #>>> OrderByDescending<<#= types #>, TKey>(this IEnumerable<_<<#= types #>>> self, Func<<#= types #>, TKey> keySelector)
        {
            return self.OrderByDescending(t => keySelector(<#= args #>));
        }

        /// <summary>
        /// タプルのシーケンスの各要素を展開して keySelector に渡す sort の降順版です。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TKey">keySelector によって返されるキーの型。</typeparam>
        /// <param name="self">sort 対象のシーケンス。</param>
        /// <param name="keySelector">要素からキーを抽出する関数。</param>
        /// <param name="comparer">キーを比較するオブジェクト。</param>
        /// <returns>要素がキーに従って並べ替えられているシーケンス。</returns>
        public static IOrderedEnumerable<_<<#= types #>>> OrderByDescending<<#= types #>, TKey>(this IEnumerable<_<<#= types #>>> self, Func<<#= types #>, TKey> keySelector, IComparer<TKey> comparer)
        {
            return self.OrderByDescending(t => keySelector(<#= args #>), comparer);
        }

        /// <summary>
        /// OrderBy、OrderByDescending、ThenBy、ThenByDescending によって並び替えられたシーケンスの順序を保ったまま、さらに並び替えを行います。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TKey">keySelector によって返されるキーの型。</typeparam>
        /// <param name="self">sort 対象のシーケンス。</param>
        /// <param name="keySelector">要素からキーを抽出する関数。</param>
        /// <returns>要素がキーに従って並べ替えられているシーケンス。</returns>
        public static IOrderedEnumerable<_<<#= types #>>> ThenBy<<#= types #>, TKey>(this IOrderedEnumerable<_<<#= types #>>> self, Func<<#= types #>, TKey> keySelector)
        {
            return self.ThenBy(t => keySelector(<#= args #>));
        }

        /// <summary>
        /// OrderBy、OrderByDescending、ThenBy、ThenByDescending によって並び替えられたシーケンスの順序を保ったまま、さらに並び替えを行います。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TKey">keySelector によって返されるキーの型。</typeparam>
        /// <param name="self">sort 対象のシーケンス。</param>
        /// <param name="keySelector">要素からキーを抽出する関数。</param>
        /// <param name="comparer">キーを比較するオブジェクト。</param>
        /// <returns>要素がキーに従って並べ替えられているシーケンス。</returns>
        public static IOrderedEnumerable<_<<#= types #>>> ThenBy<<#= types #>, TKey>(this IOrderedEnumerable<_<<#= types #>>> self, Func<<#= types #>, TKey> keySelector, IComparer<TKey> comparer)
        {
            return self.ThenBy(t => keySelector(<#= args #>), comparer);
        }

        /// <summary>
        /// OrderBy、OrderByDescending、ThenBy、ThenByDescending によって並び替えられたシーケンスの順序を保ったまま、さらに並び替えを行います。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TKey">keySelector によって返されるキーの型。</typeparam>
        /// <param name="self">sort 対象のシーケンス。</param>
        /// <param name="keySelector">要素からキーを抽出する関数。</param>
        /// <returns>要素がキーに従って並べ替えられているシーケンス。</returns>
        public static IOrderedEnumerable<_<<#= types #>>> ThenByDescending<<#= types #>, TKey>(this IOrderedEnumerable<_<<#= types #>>> self, Func<<#= types #>, TKey> keySelector)
        {
            return self.ThenByDescending(t => keySelector(<#= args #>));
        }

        /// <summary>
        /// OrderBy、OrderByDescending、ThenBy、ThenByDescending によって並び替えられたシーケンスの順序を保ったまま、さらに並び替えを行います。
        /// </summary>
<# for (int j = 0; j < i; j++) { #>
        /// <typeparam name="T<#= j + 1 #>">シーケンスの保持する <#= j + 1 #> つ目の型。</typeparam>
<# } #>
        /// <typeparam name="TKey">keySelector によって返されるキーの型。</typeparam>
        /// <param name="self">sort 対象のシーケンス。</param>
        /// <param name="keySelector">要素からキーを抽出する関数。</param>
        /// <param name="comparer">キーを比較するオブジェクト。</param>
        /// <returns>要素がキーに従って並べ替えられているシーケンス。</returns>
        public static IOrderedEnumerable<_<<#= types #>>> ThenByDescending<<#= types #>, TKey>(this IOrderedEnumerable<_<<#= types #>>> self, Func<<#= types #>, TKey> keySelector, IComparer<TKey> comparer)
        {
            return self.ThenByDescending(t => keySelector(<#= args #>), comparer);
        }

<# } #>
    }
}
<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\T4\T4Util.ttinclude" #>
using System;
using System.Collections.Generic;

#pragma warning disable 618

namespace LangExt
{
    partial class Seq
    {
<# for (int i = 2; i <= Max; i++) { #>
        /// <summary><#= i #>個のシーケンスの要素1つ1つに対して、fを適用したシーケンスを返します。</summary>
        public static Seq<U> ZipWith<<#= TypeParams("T", i) #>, U>(this <#= Repeat(", ", "ISeq<T{0}> ie{0}", i) #>, Func<<#= TypeParams("T", i) #>, U> f)
        {
            return new EnumerableSeq<U>(Enumerable.ZipWith(<#= Repeat(", ", "ie{0}", i) #>, f));
        }

        /// <summary><#= i #>個のシーケンスをZipします。</summary>
        public static Seq<<#= TupleType(i) #>> Zip<<#= TypeParams("T", i) #>>(this <#= Repeat(", ", "ISeq<T{0}> ie{0}", i) #>)
        {
            return new EnumerableSeq<<#= TupleType(i) #>>(Enumerable.Zip(<#= Repeat(", ", "ie{0}", i) #>));
        }

        /// <summary>Zipされたシーケンスを元に戻し、<#= i #>個のシーケンスのタプルとして返します。</summary>
        public static Tuple<<#= TupleTypeArgs("Seq<T{0}>", 1, i) #>> Unzip<<#= TypeParams("T", i) #>>(this ISeq<<#= TupleType(i) #>> self)
        {
            return TupleModule.Create(<#= Repeat(", ", "self.Map(x => x._{0}())", i) #>);
        }

<# } #>

        /// <summary>シーケンスに対して、0から始まる整数列をZipします。</summary>
        public static Seq<Tuple<T1, int>> WithIndex<T1>(this ISeq<T1> self)
        {
            return self.Zip(InitInfinite(Func.Id));
        }

<# for (int i = 2; i <= Max - 1; i++) { #>
        /// <summary><#= i #>要素のタプルのシーケンスに対して、0から始まる整数列を加えたタプルのシーケンスとして返します。</summary>
        public static Seq<<#= TupleType(i + 1, n => n == i + 1 ? "int" : ("T" + n)) #>> WithIndex<<#= TypeParams("T", i) #>>(this ISeq<Tuple<<#= TupleTypeArgs(1, i) #>>> self)
        {
            return new EnumerableSeq<<#= TupleType(i + 1, n => n == i + 1 ? "int" : ("T" + n)) #>>(Enumerable.WithIndex(self));
        }

<# } #>
    }
}

#pragma warning restore 618
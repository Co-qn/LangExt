<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="T4Util.ttinclude" #>
using System;

namespace LangExt2
{
    partial class Func
    {
<#
    for (int i = 1; i <= 16; i++) {
#>
        /// <summary>関数の結果をOptionで包む関数に変換します。関数の結果が例外の場合、Noneになります。</summary>
        public static Func<<#= TypeParams("T", i) #>, Option<U>> ExnToOption<<#= TypeParams("T", i) #>, U>(this Func<<#= TypeParams("T", i) #>, U> self)
        {
            return (<#= MethodCallArgs("t", i) #>) => { try { return Option.Some(self(<#= MethodCallArgs("t", i) #>)); } catch { return Option.None; } };
        }

        /// <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        public static Func<<#= TypeParams("T", i) #>, Option<U>> NullToOption<<#= TypeParams("T", i) #>, U>(this Func<<#= TypeParams("T", i) #>, U> self)
            where U : class
        {
            return (<#= MethodCallArgs("t", i) #>) => Option.Create(self(<#= MethodCallArgs("t", i) #>));
        }

        /// <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullの場合、Noneになります。</summary>
        public static Func<<#= TypeParams("T", i) #>, Option<U>> NullToOption<<#= TypeParams("T", i) #>, U>(this Func<<#= TypeParams("T", i) #>, U?> self)
            where U : struct
        {
            return (<#= MethodCallArgs("t", i) #>) => Option.Create(self(<#= MethodCallArgs("t", i) #>));
        }

        /// <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        public static Func<<#= TypeParams("T", i) #>, Option<U>> ToOption<<#= TypeParams("T", i) #>, U>(this Func<<#= TypeParams("T", i) #>, U> self)
            where U : class
        {
            return (<#= MethodCallArgs("t", i) #>) => { try { return Option.Create(self(<#= MethodCallArgs("t", i) #>)); } catch { return Option.None; } };
        }

        /// <summary>関数の結果をOptionで包む関数に変換します。関数の結果がnullか例外の場合、Noneになります。</summary>
        public static Func<<#= TypeParams("T", i) #>, Option<U>> ToOption<<#= TypeParams("T", i) #>, U>(this Func<<#= TypeParams("T", i) #>, U?> self)
            where U : struct
        {
            return (<#= MethodCallArgs("t", i) #>) => { try { return Option.Create(self(<#= MethodCallArgs("t", i) #>)); } catch { return Option.None; } };
        }

<# } #>
    }
}

<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="T4Util.ttinclude" #>
using System;

namespace LangExt2
{
    partial class Func
    {
<#
    for (int i = 2; i <= Max; i++) {
        var types = TypeParams("T", i);
#>
        /// <summary><#= i #>つの引数を受け取る関数をカリー化します。</summary>
        public static <#= Fold("U", "Func<T{1}, {0}>", i) #> Curried<<#= types #>, U>(this Func<<#= types #>, U> self)
        {
            return <#= Fold("self(" + MethodCallArgs("t", i) + ")", "t{1} => {0}", i) #>;
        }

        /// <summary><#= i #>つの引数を受け取る関数をカリー化します。</summary>
        public static <#= Fold("U", "Func<T{1}, {0}>", i) #> Curry<<#= types #>, U>(Func<<#= types #>, U> self)
        {
            return <#= Fold("self(" + MethodCallArgs("t", i) + ")", "t{1} => {0}", i) #>;
        }

        /// <summary><#= i #>要素のタプルを受け取る関数をカリー化します。</summary>
        public static <#= Fold("U", "Func<T{1}, {0}>", i) #> CurriedX<<#= types #>, U>(this Func<<#= TupleType(i) #>, U> self)
        {
            return <#= Fold("self(Create.Tuple(" + MethodCallArgs("t", i) + "))", "t{1} => {0}", i) #>;
        }

        /// <summary><#= i #>要素のタプルを受け取る関数をカリー化します。</summary>
        public static <#= Fold("U", "Func<T{1}, {0}>", i) #> CurryX<<#= types #>, U>(Func<<#= TupleType(i) #>, U> self)
        {
            return <#= Fold("self(Create.Tuple(" + MethodCallArgs("t", i) + "))", "t{1} => {0}", i) #>;
        }

        /// <summary><#= i #>つの引数を受け取る複数関数をタプル関数化します。</summary>
        public static Func<<#= TupleType(i) #>, U> Tupled<<#= types #>, U>(this Func<<#= types #>, U> self)
        {
            return tpl => self(<#= Repeat(", ", "tpl._{0}()", i) #>);
        }

        /// <summary><#= i #>つの引数を受け取る複数関数をタプル関数化します。</summary>
        public static Func<<#= TupleType(i) #>, U> Tuple<<#= types #>, U>(Func<<#= types #>, U> self)
        {
            return tpl => self(<#= Repeat(", ", "tpl._{0}()", i) #>);
        }

        /// <summary><#= i #>つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        public static Func<<#= TupleType(i) #>, U> UncurriedX<<#= types #>, U>(this <#= Fold("U", "Func<T{1}, {0}>", i) #> self)
        {
            return tpl => self<#= Repeat("", "(tpl._{0}())", i) #>;
        }

        /// <summary><#= i #>つの引数を受け取るカリー化関数をタプル関数化します。</summary>
        public static Func<<#= TupleType(i) #>, U> UncurryX<<#= types #>, U>(<#= Fold("U", "Func<T{1}, {0}>", i) #> self)
        {
            return tpl => self<#= Repeat("", "(tpl._{0}())", i) #>;
        }

        /// <summary><#= i #>要素のタプルを受け取る関数を複数引数関数化します。</summary>
        public static Func<<#= types #>, U> Untupled<<#= types #>, U>(this Func<<#= TupleType(i) #>, U> self)
        {
            return (<#= MethodCallArgs("t", i) #>) => self(Create.Tuple(<#= MethodCallArgs("t", i) #>));
        }

        /// <summary><#= i #>要素のタプルを受け取る関数を複数引数関数化します。</summary>
        public static Func<<#= types #>, U> Untuple<<#= types #>, U>(Func<<#= TupleType(i) #>, U> self)
        {
            return (<#= MethodCallArgs("t", i) #>) => self(Create.Tuple(<#= MethodCallArgs("t", i) #>));
        }

        /// <summary><#= i #>つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        public static Func<<#= types #>, U> Uncurried<<#= types #>, U>(this <#= Fold("U", "Func<T{1}, {0}>", i) #> self)
        {
            return (<#= MethodCallArgs("t", i) #>) => self<#= Repeat("", "(t{0})", i) #>;
        }

        /// <summary><#= i #>つの引数を受け取るカリー化関数をアンカリー化します。</summary>
        public static Func<<#= types #>, U> Uncurry<<#= types #>, U>(<#= Fold("U", "Func<T{1}, {0}>", i) #> self)
        {
            return (<#= MethodCallArgs("t", i) #>) => self<#= Repeat("", "(t{0})", i) #>;
        }

<# } #>
    }
}